
IMUandUSB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000022fa  0000238e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800128  00800128  000023b6  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a4  00000000  00000000  00004d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000055f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c03  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000785  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3d  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00008838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072e  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000238d  00000000  00000000  0000964a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b9d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_10>
      2c:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_11>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      80:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_32>
      84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      ac:	e5 0a       	sbc	r14, r21
      ae:	e2 0a       	sbc	r14, r18
      b0:	df 0a       	sbc	r13, r31
      b2:	dc 0a       	sbc	r13, r28
      b4:	d9 0a       	sbc	r13, r25
      b6:	d6 0a       	sbc	r13, r22
      b8:	d3 0a       	sbc	r13, r19
      ba:	d0 0a       	sbc	r13, r16
      bc:	cd 0a       	sbc	r12, r29
      be:	ca 0a       	sbc	r12, r26
      c0:	c7 0a       	sbc	r12, r23
      c2:	c4 0a       	sbc	r12, r20
      c4:	c1 0a       	sbc	r12, r17
      c6:	be 0a       	sbc	r11, r30
      c8:	bb 0a       	sbc	r11, r27
      ca:	b8 0a       	sbc	r11, r24
      cc:	b5 0a       	sbc	r11, r21
      ce:	b2 0a       	sbc	r11, r18
      d0:	af 0a       	sbc	r10, r31
      d2:	ac 0a       	sbc	r10, r28
      d4:	a9 0a       	sbc	r10, r25
      d6:	a6 0a       	sbc	r10, r22
      d8:	a3 0a       	sbc	r10, r19
      da:	a0 0a       	sbc	r10, r16
      dc:	9d 0a       	sbc	r9, r29
      de:	9a 0a       	sbc	r9, r26
      e0:	97 0a       	sbc	r9, r23
      e2:	94 0a       	sbc	r9, r20
      e4:	91 0a       	sbc	r9, r17
      e6:	8e 0a       	sbc	r8, r30
      e8:	8b 0a       	sbc	r8, r27
      ea:	88 0a       	sbc	r8, r24
      ec:	85 0a       	sbc	r8, r21
      ee:	82 0a       	sbc	r8, r18
      f0:	7f 0a       	sbc	r7, r31
      f2:	7c 0a       	sbc	r7, r28
      f4:	79 0a       	sbc	r7, r25
      f6:	76 0a       	sbc	r7, r22
      f8:	73 0a       	sbc	r7, r19
      fa:	70 0a       	sbc	r7, r16
      fc:	6d 0a       	sbc	r6, r29
      fe:	6a 0a       	sbc	r6, r26
     100:	67 0a       	sbc	r6, r23
     102:	64 0a       	sbc	r6, r20
     104:	61 0a       	sbc	r6, r17
     106:	5e 0a       	sbc	r5, r30
     108:	5b 0a       	sbc	r5, r27
     10a:	58 0a       	sbc	r5, r24
     10c:	55 0a       	sbc	r5, r21
     10e:	52 0a       	sbc	r5, r18
     110:	4f 0a       	sbc	r4, r31
     112:	4c 0a       	sbc	r4, r28
     114:	49 0a       	sbc	r4, r25
     116:	46 0a       	sbc	r4, r22
     118:	43 0a       	sbc	r4, r19
     11a:	40 0a       	sbc	r4, r16
     11c:	3d 0a       	sbc	r3, r29
     11e:	3a 0a       	sbc	r3, r26
     120:	37 0a       	sbc	r3, r23
     122:	34 0a       	sbc	r3, r20
     124:	31 0a       	sbc	r3, r17
     126:	2e 0a       	sbc	r2, r30
     128:	2b 0a       	sbc	r2, r27
     12a:	28 0a       	sbc	r2, r24
     12c:	25 0a       	sbc	r2, r21

0000012e <descriptor_list>:
     12e:	00 01 00 00 62 01 12 00 02 00 00 74 01 43 00 03     ....b......t.C..
     13e:	00 00 b7 01 04 01 03 09 04 bb 01 12 02 03 09 04     ................
     14e:	cf 01 06 03 03 09 04 d7 01 08                       ..........

00000158 <endpoint_config_table>:
     158:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000162 <device_descriptor>:
     162:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     172:	03 01                                               ..

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <string0>:
     1b7:	04 03 09 04                                         ....

000001bb <string1>:
     1bb:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     1cb:	65 00 00 00                                         e...

000001cf <string2>:
     1cf:	06 03 4d 00 32 00 00 00                             ..M.2...

000001d7 <string3>:
     1d7:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

000001e2 <__ctors_end>:
     1e2:	11 24       	eor	r1, r1
     1e4:	1f be       	out	0x3f, r1	; 63
     1e6:	cf ef       	ldi	r28, 0xFF	; 255
     1e8:	da e0       	ldi	r29, 0x0A	; 10
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
     1ee:	11 e0       	ldi	r17, 0x01	; 1
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	ea ef       	ldi	r30, 0xFA	; 250
     1f6:	f2 e2       	ldi	r31, 0x22	; 34
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x10>
     1fa:	05 90       	lpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	a8 32       	cpi	r26, 0x28	; 40
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0xc>

00000204 <__do_clear_bss>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a8 e2       	ldi	r26, 0x28	; 40
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	ae 36       	cpi	r26, 0x6E	; 110
     210:	b1 07       	cpc	r27, r17
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 25 04 	call	0x84a	; 0x84a <main>
     218:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <Kalman_Filter>:

float q_bias, angle_err, PCt_0, PCt_1, E, K_0, K_1, t_0, t_1;
//-------------------------------------------------------

void Kalman_Filter(float angle_m,float gyro_m)			//gyro_m:gyro_measure
{
     220:	2f 92       	push	r2
     222:	3f 92       	push	r3
     224:	4f 92       	push	r4
     226:	5f 92       	push	r5
     228:	6f 92       	push	r6
     22a:	7f 92       	push	r7
     22c:	8f 92       	push	r8
     22e:	9f 92       	push	r9
     230:	af 92       	push	r10
     232:	bf 92       	push	r11
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	aa 97       	sbiw	r28, 0x2a	; 42
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	6d 83       	std	Y+5, r22	; 0x05
     256:	7e 83       	std	Y+6, r23	; 0x06
     258:	8f 83       	std	Y+7, r24	; 0x07
     25a:	98 87       	std	Y+8, r25	; 0x08
     25c:	29 a3       	lds	r18, 0x59
     25e:	3a a3       	lds	r19, 0x5a
     260:	4b a3       	lds	r20, 0x5b
     262:	5c a3       	lds	r21, 0x5c
	angle+=(gyro_m-q_bias) * dt;
     264:	40 91 52 01 	lds	r20, 0x0152
     268:	50 91 53 01 	lds	r21, 0x0153
     26c:	60 91 54 01 	lds	r22, 0x0154
     270:	70 91 55 01 	lds	r23, 0x0155
     274:	4d 8b       	std	Y+21, r20	; 0x15
     276:	5e 8b       	std	Y+22, r21	; 0x16
     278:	6f 8b       	std	Y+23, r22	; 0x17
     27a:	78 8f       	std	Y+24, r23	; 0x18
     27c:	60 91 11 01 	lds	r22, 0x0111
     280:	70 91 12 01 	lds	r23, 0x0112
     284:	80 91 13 01 	lds	r24, 0x0113
     288:	90 91 14 01 	lds	r25, 0x0114
     28c:	69 87       	std	Y+9, r22	; 0x09
     28e:	7a 87       	std	Y+10, r23	; 0x0a
     290:	8b 87       	std	Y+11, r24	; 0x0b
     292:	9c 87       	std	Y+12, r25	; 0x0c
     294:	69 a1       	lds	r22, 0x49
     296:	7a a1       	lds	r23, 0x4a
     298:	8b a1       	lds	r24, 0x4b
     29a:	9c a1       	lds	r25, 0x4c
     29c:	2d 89       	ldd	r18, Y+21	; 0x15
     29e:	3e 89       	ldd	r19, Y+22	; 0x16
     2a0:	4f 89       	ldd	r20, Y+23	; 0x17
     2a2:	58 8d       	ldd	r21, Y+24	; 0x18
     2a4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     2a8:	29 85       	ldd	r18, Y+9	; 0x09
     2aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     2ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     2ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     2b0:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     2b4:	20 91 56 01 	lds	r18, 0x0156
     2b8:	30 91 57 01 	lds	r19, 0x0157
     2bc:	40 91 58 01 	lds	r20, 0x0158
     2c0:	50 91 59 01 	lds	r21, 0x0159
     2c4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     2c8:	6d a3       	lds	r22, 0x5d
     2ca:	7e a3       	lds	r23, 0x5e
     2cc:	8f a3       	lds	r24, 0x5f
     2ce:	98 a7       	lds	r25, 0x78
	
	Pdot[0]=Q_angle - P[0][1] - P[1][0];// Pk-'
     2d0:	40 90 05 01 	lds	r4, 0x0105
     2d4:	50 90 06 01 	lds	r5, 0x0106
     2d8:	60 90 07 01 	lds	r6, 0x0107
     2dc:	70 90 08 01 	lds	r7, 0x0108
     2e0:	80 91 09 01 	lds	r24, 0x0109
     2e4:	90 91 0a 01 	lds	r25, 0x010A
     2e8:	a0 91 0b 01 	lds	r26, 0x010B
     2ec:	b0 91 0c 01 	lds	r27, 0x010C
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	9a 83       	std	Y+2, r25	; 0x02
     2f4:	ab 83       	std	Y+3, r26	; 0x03
     2f6:	bc 83       	std	Y+4, r27	; 0x04
     2f8:	60 91 1d 01 	lds	r22, 0x011D
     2fc:	70 91 1e 01 	lds	r23, 0x011E
     300:	80 91 1f 01 	lds	r24, 0x011F
     304:	90 91 20 01 	lds	r25, 0x0120
     308:	a3 01       	movw	r20, r6
     30a:	92 01       	movw	r18, r4
     30c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     310:	29 81       	ldd	r18, Y+1	; 0x01
     312:	3a 81       	ldd	r19, Y+2	; 0x02
     314:	4b 81       	ldd	r20, Y+3	; 0x03
     316:	5c 81       	ldd	r21, Y+4	; 0x04
     318:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     31c:	b6 2f       	mov	r27, r22
     31e:	a7 2f       	mov	r26, r23
     320:	38 2f       	mov	r19, r24
     322:	29 2f       	mov	r18, r25
     324:	98 2f       	mov	r25, r24
     326:	4b 2f       	mov	r20, r27
     328:	5a 2f       	mov	r21, r26
     32a:	69 2f       	mov	r22, r25
     32c:	72 2f       	mov	r23, r18
     32e:	40 93 28 01 	sts	0x0128, r20
     332:	50 93 29 01 	sts	0x0129, r21
     336:	60 93 2a 01 	sts	0x012A, r22
     33a:	70 93 2b 01 	sts	0x012B, r23
	Pdot[1]=- P[1][1];
     33e:	40 91 0d 01 	lds	r20, 0x010D
     342:	50 91 0e 01 	lds	r21, 0x010E
     346:	60 91 0f 01 	lds	r22, 0x010F
     34a:	70 91 10 01 	lds	r23, 0x0110
     34e:	49 8f       	std	Y+25, r20	; 0x19
     350:	5a 8f       	std	Y+26, r21	; 0x1a
     352:	6b 8f       	std	Y+27, r22	; 0x1b
     354:	7c 8f       	std	Y+28, r23	; 0x1c
     356:	6a 01       	movw	r12, r20
     358:	7b 01       	movw	r14, r22
     35a:	f7 fa       	bst	r15, 7
     35c:	f0 94       	com	r15
     35e:	f7 f8       	bld	r15, 7
     360:	f0 94       	com	r15
     362:	c0 92 2c 01 	sts	0x012C, r12
     366:	d0 92 2d 01 	sts	0x012D, r13
     36a:	e0 92 2e 01 	sts	0x012E, r14
     36e:	f0 92 2f 01 	sts	0x012F, r15
	Pdot[2]=- P[1][1];
     372:	c0 92 30 01 	sts	0x0130, r12
     376:	d0 92 31 01 	sts	0x0131, r13
     37a:	e0 92 32 01 	sts	0x0132, r14
     37e:	f0 92 33 01 	sts	0x0133, r15
	Pdot[3]=Q_gyro;
     382:	60 91 19 01 	lds	r22, 0x0119
     386:	70 91 1a 01 	lds	r23, 0x011A
     38a:	80 91 1b 01 	lds	r24, 0x011B
     38e:	90 91 1c 01 	lds	r25, 0x011C
     392:	6d 8f       	std	Y+29, r22	; 0x1d
     394:	7e 8f       	std	Y+30, r23	; 0x1e
     396:	8f 8f       	std	Y+31, r24	; 0x1f
     398:	98 a3       	lds	r25, 0x58
     39a:	60 93 34 01 	sts	0x0134, r22
     39e:	70 93 35 01 	sts	0x0135, r23
     3a2:	80 93 36 01 	sts	0x0136, r24
     3a6:	90 93 37 01 	sts	0x0137, r25
	
	P[0][0] += Pdot[0] * dt;// Pk- 
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	9a 8b       	std	Y+18, r25	; 0x12
     3b0:	89 8b       	std	Y+17, r24	; 0x11
     3b2:	69 85       	ldd	r22, Y+9	; 0x09
     3b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ba:	42 2f       	mov	r20, r18
     3bc:	0b 2f       	mov	r16, r27
     3be:	1a 2f       	mov	r17, r26
     3c0:	23 2f       	mov	r18, r19
     3c2:	34 2f       	mov	r19, r20
     3c4:	a9 01       	movw	r20, r18
     3c6:	98 01       	movw	r18, r16
     3c8:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     3cc:	a9 89       	ldd	r26, Y+17	; 0x11
     3ce:	ba 89       	ldd	r27, Y+18	; 0x12
     3d0:	5e 91       	ld	r21, -X
     3d2:	4e 91       	ld	r20, -X
     3d4:	3e 91       	ld	r19, -X
     3d6:	2e 91       	ld	r18, -X
     3d8:	ba 8b       	std	Y+18, r27	; 0x12
     3da:	a9 8b       	std	Y+17, r26	; 0x11
     3dc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     3e0:	b6 2e       	mov	r11, r22
     3e2:	a7 2e       	mov	r10, r23
     3e4:	98 2e       	mov	r9, r24
     3e6:	89 2e       	mov	r8, r25
	P[0][1] += Pdot[1] * dt;
     3e8:	69 85       	ldd	r22, Y+9	; 0x09
     3ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     3ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     3f0:	a7 01       	movw	r20, r14
     3f2:	96 01       	movw	r18, r12
     3f4:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     3f8:	e6 2e       	mov	r14, r22
     3fa:	d7 2e       	mov	r13, r23
     3fc:	f8 2e       	mov	r15, r24
     3fe:	c9 2e       	mov	r12, r25
     400:	c3 01       	movw	r24, r6
     402:	b2 01       	movw	r22, r4
     404:	0e 2d       	mov	r16, r14
     406:	1d 2d       	mov	r17, r13
     408:	2f 2d       	mov	r18, r15
     40a:	3c 2d       	mov	r19, r12
     40c:	a9 01       	movw	r20, r18
     40e:	98 01       	movw	r18, r16
     410:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     414:	6d 87       	std	Y+13, r22	; 0x0d
     416:	7e 87       	std	Y+14, r23	; 0x0e
     418:	8f 87       	std	Y+15, r24	; 0x0f
     41a:	98 8b       	std	Y+16, r25	; 0x10
	P[1][0] += Pdot[2] * dt;
     41c:	69 81       	ldd	r22, Y+1	; 0x01
     41e:	7a 81       	ldd	r23, Y+2	; 0x02
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	9c 81       	ldd	r25, Y+4	; 0x04
     424:	2f 2d       	mov	r18, r15
     426:	3c 2d       	mov	r19, r12
     428:	a9 01       	movw	r20, r18
     42a:	98 01       	movw	r18, r16
     42c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     430:	46 2e       	mov	r4, r22
     432:	77 2e       	mov	r7, r23
     434:	68 2e       	mov	r6, r24
     436:	59 2e       	mov	r5, r25
	P[1][1] += Pdot[3] * dt;
	
	
	angle_err = angle_m - angle;//zk-
     438:	6d 81       	ldd	r22, Y+5	; 0x05
     43a:	7e 81       	ldd	r23, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	fd a1       	lds	r31, 0x4d
     442:	ee a1       	lds	r30, 0x4e
     444:	5f a1       	lds	r21, 0x4f
     446:	48 a5       	lds	r20, 0x68
     448:	0f 2f       	mov	r16, r31
     44a:	1e 2f       	mov	r17, r30
     44c:	25 2f       	mov	r18, r21
     44e:	34 2f       	mov	r19, r20
     450:	a9 01       	movw	r20, r18
     452:	98 01       	movw	r18, r16
     454:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     458:	69 83       	std	Y+1, r22	; 0x01
     45a:	7d 83       	std	Y+5, r23	; 0x05
     45c:	8b 8b       	std	Y+19, r24	; 0x13
     45e:	9c 8b       	std	Y+20, r25	; 0x14
     460:	47 2f       	mov	r20, r23
     462:	38 2f       	mov	r19, r24
     464:	29 2f       	mov	r18, r25
     466:	86 2f       	mov	r24, r22
     468:	94 2f       	mov	r25, r20
     46a:	a3 2f       	mov	r26, r19
     46c:	b2 2f       	mov	r27, r18
     46e:	80 93 6a 01 	sts	0x016A, r24
     472:	90 93 6b 01 	sts	0x016B, r25
     476:	a0 93 6c 01 	sts	0x016C, r26
     47a:	b0 93 6d 01 	sts	0x016D, r27
	
	
	PCt_0 = C_0 * P[0][0];
     47e:	8b 2d       	mov	r24, r11
     480:	9a 2d       	mov	r25, r10
     482:	a9 2d       	mov	r26, r9
     484:	b8 2d       	mov	r27, r8
     486:	80 93 4e 01 	sts	0x014E, r24
     48a:	90 93 4f 01 	sts	0x014F, r25
     48e:	a0 93 50 01 	sts	0x0150, r26
     492:	b0 93 51 01 	sts	0x0151, r27
	PCt_1 = C_0 * P[1][0];
     496:	84 2d       	mov	r24, r4
     498:	97 2d       	mov	r25, r7
     49a:	a6 2d       	mov	r26, r6
     49c:	b5 2d       	mov	r27, r5
     49e:	80 93 5a 01 	sts	0x015A, r24
     4a2:	90 93 5b 01 	sts	0x015B, r25
     4a6:	a0 93 5c 01 	sts	0x015C, r26
     4aa:	b0 93 5d 01 	sts	0x015D, r27
	
	E = R_angle + C_0 * PCt_0;
     4ae:	8b 2d       	mov	r24, r11
     4b0:	9a 2d       	mov	r25, r10
     4b2:	a9 2d       	mov	r26, r9
     4b4:	b8 2d       	mov	r27, r8
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	20 91 15 01 	lds	r18, 0x0115
     4be:	30 91 16 01 	lds	r19, 0x0116
     4c2:	40 91 17 01 	lds	r20, 0x0117
     4c6:	50 91 18 01 	lds	r21, 0x0118
     4ca:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     4ce:	c6 2e       	mov	r12, r22
     4d0:	79 a7       	lds	r23, 0x79
     4d2:	8a a7       	lds	r24, 0x7a
     4d4:	f9 2e       	mov	r15, r25
     4d6:	47 2f       	mov	r20, r23
     4d8:	38 2f       	mov	r19, r24
     4da:	86 2f       	mov	r24, r22
     4dc:	94 2f       	mov	r25, r20
     4de:	a3 2f       	mov	r26, r19
     4e0:	bf 2d       	mov	r27, r15
     4e2:	80 93 62 01 	sts	0x0162, r24
     4e6:	90 93 63 01 	sts	0x0163, r25
     4ea:	a0 93 64 01 	sts	0x0164, r26
     4ee:	b0 93 65 01 	sts	0x0165, r27
	
	K_0 = PCt_0 / E;//Kk
     4f2:	8b 2d       	mov	r24, r11
     4f4:	9a 2d       	mov	r25, r10
     4f6:	a9 2d       	mov	r26, r9
     4f8:	b8 2d       	mov	r27, r8
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	e9 a5       	lds	r30, 0x69
     500:	5a a5       	lds	r21, 0x6a
     502:	0c 2d       	mov	r16, r12
     504:	1e 2f       	mov	r17, r30
     506:	25 2f       	mov	r18, r21
     508:	3f 2d       	mov	r19, r15
     50a:	a9 01       	movw	r20, r18
     50c:	98 01       	movw	r18, r16
     50e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divsf3>
     512:	e6 2e       	mov	r14, r22
     514:	d7 2e       	mov	r13, r23
     516:	38 2e       	mov	r3, r24
     518:	29 2e       	mov	r2, r25
     51a:	86 2f       	mov	r24, r22
     51c:	9d 2d       	mov	r25, r13
     51e:	a3 2d       	mov	r26, r3
     520:	b2 2d       	mov	r27, r2
     522:	80 93 66 01 	sts	0x0166, r24
     526:	90 93 67 01 	sts	0x0167, r25
     52a:	a0 93 68 01 	sts	0x0168, r26
     52e:	b0 93 69 01 	sts	0x0169, r27
	K_1 = PCt_1 / E;
     532:	84 2d       	mov	r24, r4
     534:	97 2d       	mov	r25, r7
     536:	a6 2d       	mov	r26, r6
     538:	b5 2d       	mov	r27, r5
     53a:	bc 01       	movw	r22, r24
     53c:	cd 01       	movw	r24, r26
     53e:	5a a5       	lds	r21, 0x6a
     540:	25 2f       	mov	r18, r21
     542:	3f 2d       	mov	r19, r15
     544:	a9 01       	movw	r20, r18
     546:	98 01       	movw	r18, r16
     548:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divsf3>
     54c:	c6 2e       	mov	r12, r22
     54e:	79 a7       	lds	r23, 0x79
     550:	8a a7       	lds	r24, 0x7a
     552:	f9 2e       	mov	r15, r25
     554:	47 2f       	mov	r20, r23
     556:	38 2f       	mov	r19, r24
     558:	86 2f       	mov	r24, r22
     55a:	94 2f       	mov	r25, r20
     55c:	a3 2f       	mov	r26, r19
     55e:	bf 2d       	mov	r27, r15
     560:	80 93 5e 01 	sts	0x015E, r24
     564:	90 93 5f 01 	sts	0x015F, r25
     568:	a0 93 60 01 	sts	0x0160, r26
     56c:	b0 93 61 01 	sts	0x0161, r27
	
	t_0 = PCt_0;
     570:	8b 2d       	mov	r24, r11
     572:	9a 2d       	mov	r25, r10
     574:	a9 2d       	mov	r26, r9
     576:	b8 2d       	mov	r27, r8
     578:	80 93 4a 01 	sts	0x014A, r24
     57c:	90 93 4b 01 	sts	0x014B, r25
     580:	a0 93 4c 01 	sts	0x014C, r26
     584:	b0 93 4d 01 	sts	0x014D, r27
	t_1 = C_0 * P[0][1];
     588:	5d 85       	ldd	r21, Y+13	; 0x0d
     58a:	4e 85       	ldd	r20, Y+14	; 0x0e
     58c:	3f 85       	ldd	r19, Y+15	; 0x0f
     58e:	28 89       	ldd	r18, Y+16	; 0x10
     590:	85 2f       	mov	r24, r21
     592:	94 2f       	mov	r25, r20
     594:	a3 2f       	mov	r26, r19
     596:	b2 2f       	mov	r27, r18
     598:	80 93 42 01 	sts	0x0142, r24
     59c:	90 93 43 01 	sts	0x0143, r25
     5a0:	a0 93 44 01 	sts	0x0144, r26
     5a4:	b0 93 45 01 	sts	0x0145, r27

	P[0][0] -= K_0 * t_0;
     5a8:	8b 2d       	mov	r24, r11
     5aa:	9a 2d       	mov	r25, r10
     5ac:	a9 2d       	mov	r26, r9
     5ae:	b8 2d       	mov	r27, r8
     5b0:	bc 01       	movw	r22, r24
     5b2:	cd 01       	movw	r24, r26
     5b4:	0e 2d       	mov	r16, r14
     5b6:	1d 2d       	mov	r17, r13
     5b8:	23 2d       	mov	r18, r3
     5ba:	32 2d       	mov	r19, r2
     5bc:	a9 01       	movw	r20, r18
     5be:	98 01       	movw	r18, r16
     5c0:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     5c4:	9b 01       	movw	r18, r22
     5c6:	ac 01       	movw	r20, r24
     5c8:	8b 2d       	mov	r24, r11
     5ca:	9a 2d       	mov	r25, r10
     5cc:	a9 2d       	mov	r26, r9
     5ce:	b8 2d       	mov	r27, r8
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	e9 89       	ldd	r30, Y+17	; 0x11
     5de:	fa 89       	ldd	r31, Y+18	; 0x12
     5e0:	80 83       	st	Z, r24
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	a2 83       	std	Z+2, r26	; 0x02
     5e6:	b3 83       	std	Z+3, r27	; 0x03
	P[0][1] -= K_0 * t_1;
     5e8:	5d 85       	ldd	r21, Y+13	; 0x0d
     5ea:	4e 85       	ldd	r20, Y+14	; 0x0e
     5ec:	3f 85       	ldd	r19, Y+15	; 0x0f
     5ee:	28 89       	ldd	r18, Y+16	; 0x10
     5f0:	85 2f       	mov	r24, r21
     5f2:	94 2f       	mov	r25, r20
     5f4:	a3 2f       	mov	r26, r19
     5f6:	b2 2f       	mov	r27, r18
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	23 2d       	mov	r18, r3
     5fe:	32 2d       	mov	r19, r2
     600:	a9 01       	movw	r20, r18
     602:	98 01       	movw	r18, r16
     604:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	fd 85       	ldd	r31, Y+13	; 0x0d
     60e:	ee 85       	ldd	r30, Y+14	; 0x0e
     610:	7f 85       	ldd	r23, Y+15	; 0x0f
     612:	68 89       	ldd	r22, Y+16	; 0x10
     614:	8f 2f       	mov	r24, r31
     616:	9e 2f       	mov	r25, r30
     618:	a7 2f       	mov	r26, r23
     61a:	b6 2f       	mov	r27, r22
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	80 93 05 01 	sts	0x0105, r24
     62c:	90 93 06 01 	sts	0x0106, r25
     630:	a0 93 07 01 	sts	0x0107, r26
     634:	b0 93 08 01 	sts	0x0108, r27
	P[1][0] -= K_1 * t_0;
     638:	8b 2d       	mov	r24, r11
     63a:	9a 2d       	mov	r25, r10
     63c:	a9 2d       	mov	r26, r9
     63e:	b8 2d       	mov	r27, r8
     640:	bc 01       	movw	r22, r24
     642:	cd 01       	movw	r24, r26
     644:	e9 a5       	lds	r30, 0x69
     646:	5a a5       	lds	r21, 0x6a
     648:	0c 2d       	mov	r16, r12
     64a:	1e 2f       	mov	r17, r30
     64c:	25 2f       	mov	r18, r21
     64e:	3f 2d       	mov	r19, r15
     650:	a9 01       	movw	r20, r18
     652:	98 01       	movw	r18, r16
     654:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	84 2d       	mov	r24, r4
     65e:	97 2d       	mov	r25, r7
     660:	a6 2d       	mov	r26, r6
     662:	b5 2d       	mov	r27, r5
     664:	bc 01       	movw	r22, r24
     666:	cd 01       	movw	r24, r26
     668:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	80 93 09 01 	sts	0x0109, r24
     674:	90 93 0a 01 	sts	0x010A, r25
     678:	a0 93 0b 01 	sts	0x010B, r26
     67c:	b0 93 0c 01 	sts	0x010C, r27
	Pdot[3]=Q_gyro;
	
	P[0][0] += Pdot[0] * dt;// Pk- 
	P[0][1] += Pdot[1] * dt;
	P[1][0] += Pdot[2] * dt;
	P[1][1] += Pdot[3] * dt;
     680:	69 85       	ldd	r22, Y+9	; 0x09
     682:	7a 85       	ldd	r23, Y+10	; 0x0a
     684:	8b 85       	ldd	r24, Y+11	; 0x0b
     686:	9c 85       	ldd	r25, Y+12	; 0x0c
     688:	2d 8d       	ldd	r18, Y+29	; 0x1d
     68a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     68c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     68e:	58 a1       	lds	r21, 0x48
     690:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	69 8d       	ldd	r22, Y+25	; 0x19
     69a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     69c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     69e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6a0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     6a4:	2b 01       	movw	r4, r22
     6a6:	3c 01       	movw	r6, r24
	t_1 = C_0 * P[0][1];

	P[0][0] -= K_0 * t_0;
	P[0][1] -= K_0 * t_1;
	P[1][0] -= K_1 * t_0;
	P[1][1] -= K_1 * t_1;
     6a8:	5d 85       	ldd	r21, Y+13	; 0x0d
     6aa:	4e 85       	ldd	r20, Y+14	; 0x0e
     6ac:	3f 85       	ldd	r19, Y+15	; 0x0f
     6ae:	28 89       	ldd	r18, Y+16	; 0x10
     6b0:	85 2f       	mov	r24, r21
     6b2:	94 2f       	mov	r25, r20
     6b4:	a3 2f       	mov	r26, r19
     6b6:	b2 2f       	mov	r27, r18
     6b8:	bc 01       	movw	r22, r24
     6ba:	cd 01       	movw	r24, r26
     6bc:	5a a5       	lds	r21, 0x6a
     6be:	25 2f       	mov	r18, r21
     6c0:	3f 2d       	mov	r19, r15
     6c2:	a9 01       	movw	r20, r18
     6c4:	98 01       	movw	r18, r16
     6c6:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	c3 01       	movw	r24, r6
     6d0:	b2 01       	movw	r22, r4
     6d2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	80 93 0d 01 	sts	0x010D, r24
     6de:	90 93 0e 01 	sts	0x010E, r25
     6e2:	a0 93 0f 01 	sts	0x010F, r26
     6e6:	b0 93 10 01 	sts	0x0110, r27
	
	
	angle	+= K_0 * angle_err;
     6ea:	59 81       	ldd	r21, Y+1	; 0x01
     6ec:	4d 81       	ldd	r20, Y+5	; 0x05
     6ee:	3b 89       	ldd	r19, Y+19	; 0x13
     6f0:	2c 89       	ldd	r18, Y+20	; 0x14
     6f2:	85 2f       	mov	r24, r21
     6f4:	94 2f       	mov	r25, r20
     6f6:	a3 2f       	mov	r26, r19
     6f8:	b2 2f       	mov	r27, r18
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	0e 2d       	mov	r16, r14
     700:	1d 2d       	mov	r17, r13
     702:	23 2d       	mov	r18, r3
     704:	32 2d       	mov	r19, r2
     706:	a9 01       	movw	r20, r18
     708:	98 01       	movw	r18, r16
     70a:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     70e:	9b 01       	movw	r18, r22
     710:	ac 01       	movw	r20, r24
     712:	fd a1       	lds	r31, 0x4d
     714:	ee a1       	lds	r30, 0x4e
     716:	7f a1       	lds	r23, 0x4f
     718:	68 a5       	lds	r22, 0x68
     71a:	8f 2f       	mov	r24, r31
     71c:	9e 2f       	mov	r25, r30
     71e:	a7 2f       	mov	r26, r23
     720:	b6 2f       	mov	r27, r22
     722:	bc 01       	movw	r22, r24
     724:	cd 01       	movw	r24, r26
     726:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	80 93 56 01 	sts	0x0156, r24
     732:	90 93 57 01 	sts	0x0157, r25
     736:	a0 93 58 01 	sts	0x0158, r26
     73a:	b0 93 59 01 	sts	0x0159, r27
	q_bias	+= K_1 * angle_err;
     73e:	59 81       	ldd	r21, Y+1	; 0x01
     740:	4d 81       	ldd	r20, Y+5	; 0x05
     742:	3b 89       	ldd	r19, Y+19	; 0x13
     744:	2c 89       	ldd	r18, Y+20	; 0x14
     746:	85 2f       	mov	r24, r21
     748:	94 2f       	mov	r25, r20
     74a:	a3 2f       	mov	r26, r19
     74c:	b2 2f       	mov	r27, r18
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	e9 a5       	lds	r30, 0x69
     754:	5a a5       	lds	r21, 0x6a
     756:	0c 2d       	mov	r16, r12
     758:	1e 2f       	mov	r17, r30
     75a:	25 2f       	mov	r18, r21
     75c:	3f 2d       	mov	r19, r15
     75e:	a9 01       	movw	r20, r18
     760:	98 01       	movw	r18, r16
     762:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	6d 89       	ldd	r22, Y+21	; 0x15
     76c:	7e 89       	ldd	r23, Y+22	; 0x16
     76e:	8f 89       	ldd	r24, Y+23	; 0x17
     770:	98 8d       	ldd	r25, Y+24	; 0x18
     772:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     776:	b6 2f       	mov	r27, r22
     778:	a7 2f       	mov	r26, r23
     77a:	38 2f       	mov	r19, r24
     77c:	29 2f       	mov	r18, r25
     77e:	98 2f       	mov	r25, r24
     780:	4b 2f       	mov	r20, r27
     782:	5a 2f       	mov	r21, r26
     784:	69 2f       	mov	r22, r25
     786:	72 2f       	mov	r23, r18
     788:	40 93 52 01 	sts	0x0152, r20
     78c:	50 93 53 01 	sts	0x0153, r21
     790:	60 93 54 01 	sts	0x0154, r22
     794:	70 93 55 01 	sts	0x0155, r23
	angle_dot = gyro_m-q_bias;
     798:	69 a1       	lds	r22, 0x49
     79a:	7a a1       	lds	r23, 0x4a
     79c:	8b a1       	lds	r24, 0x4b
     79e:	9c a1       	lds	r25, 0x4c
     7a0:	42 2f       	mov	r20, r18
     7a2:	0b 2f       	mov	r16, r27
     7a4:	1a 2f       	mov	r17, r26
     7a6:	23 2f       	mov	r18, r19
     7a8:	34 2f       	mov	r19, r20
     7aa:	a9 01       	movw	r20, r18
     7ac:	98 01       	movw	r18, r16
     7ae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	80 93 46 01 	sts	0x0146, r24
     7ba:	90 93 47 01 	sts	0x0147, r25
     7be:	a0 93 48 01 	sts	0x0148, r26
     7c2:	b0 93 49 01 	sts	0x0149, r27
}
     7c6:	aa 96       	adiw	r28, 0x2a	; 42
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	9f 90       	pop	r9
     7e8:	8f 90       	pop	r8
     7ea:	7f 90       	pop	r7
     7ec:	6f 90       	pop	r6
     7ee:	5f 90       	pop	r5
     7f0:	4f 90       	pop	r4
     7f2:	3f 90       	pop	r3
     7f4:	2f 90       	pop	r2
     7f6:	08 95       	ret

000007f8 <TimerSetup>:
volatile int Timer3Flag=0;
volatile int Timer3Flag2=0;
volatile int Timer3Flag3=0;

void TimerSetup(void){
	OCR1A = 4000;
     7f8:	80 ea       	ldi	r24, 0xA0	; 160
     7fa:	9f e0       	ldi	r25, 0x0F	; 15
     7fc:	90 93 89 00 	sts	0x0089, r25
     800:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 2000;
     804:	80 ed       	ldi	r24, 0xD0	; 208
     806:	97 e0       	ldi	r25, 0x07	; 7
     808:	90 93 8b 00 	sts	0x008B, r25
     80c:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 2000;
     810:	90 93 8d 00 	sts	0x008D, r25
     814:	80 93 8c 00 	sts	0x008C, r24
	set(DDRB,6);
     818:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB,7);
     81a:	27 9a       	sbi	0x04, 7	; 4
	TCCR1A = 0b00101011;
     81c:	8b e2       	ldi	r24, 0x2B	; 43
     81e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00011001;
     822:	89 e1       	ldi	r24, 0x19	; 25
     824:	80 93 81 00 	sts	0x0081, r24
	//Timer1 is used to generate the PWM
	OCR3A = (int)(15625*((float)PERIOD/1000));		//set frequency, f=1/((OCR1A+1)*(1/CLK));
     828:	8e e4       	ldi	r24, 0x4E	; 78
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 99 00 	sts	0x0099, r25
     830:	80 93 98 00 	sts	0x0098, r24
	//OCR1B = (int)(COUNTER/2);		//set duty cycle, which can be calculate by (OCR1B+1)/(OCR1A+1)
	TCCR3A = 0b00000000;//0x23; //set mode to (mode 15) UP to OCR1A, PWM mode, operating at clearing at OCR1B, seting at rollover
     834:	10 92 90 00 	sts	0x0090, r1
	//#define COM1C1 3 0
	//#define COM1B0 4 0
	//#define COM1B1 5 0
	//#define COM1A0 6 0
	//#define COM1A1 7 0
	TCCR3B = 0b00001101;//0x19;//clock source /1024
     838:	8d e0       	ldi	r24, 0x0D	; 13
     83a:	80 93 91 00 	sts	0x0091, r24
	//#define WGM13 4 0
	//#define ICES1 6 0
	//#define ICNC1 7 0
	//Timer4 is used to get period interrupt
	//OCR3A = 16*INTERRUPTPERIOD;
	set(TIMSK3 , OCIE3A);
     83e:	e1 e7       	ldi	r30, 0x71	; 113
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	82 60       	ori	r24, 0x02	; 2
     846:	80 83       	st	Z, r24
}	
     848:	08 95       	ret

0000084a <main>:

int main(void)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	64 97       	sbiw	r28, 0x14	; 20
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
	int Data[9]={0};
     85e:	fe 01       	movw	r30, r28
     860:	31 96       	adiw	r30, 0x01	; 1
     862:	82 e1       	ldi	r24, 0x12	; 18
     864:	df 01       	movw	r26, r30
     866:	1d 92       	st	X+, r1
     868:	8a 95       	dec	r24
     86a:	e9 f7       	brne	.-6      	; 0x866 <main+0x1c>
	int output;
	int angleHis1=0,angleHis2=0;
	int inputK=0,inputI=0,inputD=0;
	int Output=0;
	int OutputHis=2000;
	m_clockdivide(0);
     86c:	e1 e6       	ldi	r30, 0x61	; 97
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	80 83       	st	Z, r24
     874:	10 82       	st	Z, r1
	wirelessinitial();	
     876:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <wirelessinitial>
	TimerSetup();
     87a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <TimerSetup>
	m_usb_init();
     87e:	0e 94 ca 08 	call	0x1194	; 0x1194 <m_usb_init>
	while(!m_imu_init(1,0));
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	0e 94 4a 06 	call	0xc94	; 0xc94 <m_imu_init>
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	c1 f3       	breq	.-16     	; 0x882 <main+0x38>
	sei();
     892:	78 94       	sei
	while(!m_usb_isconnected()); // wait for a connection
     894:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <m_usb_isconnected>
     898:	88 23       	and	r24, r24
     89a:	e1 f3       	breq	.-8      	; 0x894 <main+0x4a>
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	1c 8a       	std	Y+20, r1	; 0x14
     8a2:	1b 8a       	std	Y+19, r1	; 0x13
     8a4:	22 24       	eor	r2, r2
     8a6:	33 24       	eor	r3, r3
	//m_green(ON);
    while(1)
    {
		if (Timer3Flag==1)
     8a8:	80 91 3c 01 	lds	r24, 0x013C
     8ac:	90 91 3d 01 	lds	r25, 0x013D
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	91 05       	cpc	r25, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <main+0x6e>
     8b6:	e1 c0       	rjmp	.+450    	; 0xa7a <main+0x230>
		{
			if(m_imu_raw(Data))
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <m_imu_raw>
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	29 f0       	breq	.+10     	; 0x8ce <main+0x84>
			{
				m_red(TOGGLE);
     8c4:	6e 9a       	sbi	0x0d, 6	; 13
     8c6:	8e b1       	in	r24, 0x0e	; 14
     8c8:	b0 e4       	ldi	r27, 0x40	; 64
     8ca:	8b 27       	eor	r24, r27
     8cc:	8e b9       	out	0x0e, r24	; 14
			}
			
			Kalman_Filter(1.5*(Data[1]-ACOFFSET),0.5*(Data[3]-GYOFFSET));	//Using the Kalman Filter to get the reliable output of the angle
     8ce:	6b 81       	ldd	r22, Y+3	; 0x03
     8d0:	7c 81       	ldd	r23, Y+4	; 0x04
     8d2:	6a 52       	subi	r22, 0x2A	; 42
     8d4:	70 40       	sbci	r23, 0x00	; 0
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 ec       	ldi	r20, 0xC0	; 192
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	6f 81       	ldd	r22, Y+7	; 0x07
     8f4:	78 85       	ldd	r23, Y+8	; 0x08
     8f6:	6a 5c       	subi	r22, 0xCA	; 202
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	88 27       	eor	r24, r24
     8fc:	77 fd       	sbrc	r23, 7
     8fe:	80 95       	com	r24
     900:	98 2f       	mov	r25, r24
     902:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	5f e3       	ldi	r21, 0x3F	; 63
     90e:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     912:	9b 01       	movw	r18, r22
     914:	ac 01       	movw	r20, r24
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 10 01 	call	0x220	; 0x220 <Kalman_Filter>

			float Kp = 1;
			float Ki = 0;
			float Kd = 0.5;
			inputK = angle-angleHis1;
     91e:	c0 90 56 01 	lds	r12, 0x0156
     922:	d0 90 57 01 	lds	r13, 0x0157
     926:	e0 90 58 01 	lds	r14, 0x0158
     92a:	f0 90 59 01 	lds	r15, 0x0159
			inputI = angle;
			inputD = angle +angleHis2-2*angleHis1;
			
			Output += Kp*inputK + Ki*inputI + Kd*inputD;	//incremental PID
     92e:	b8 01       	movw	r22, r16
     930:	88 27       	eor	r24, r24
     932:	77 fd       	sbrc	r23, 7
     934:	80 95       	com	r24
     936:	98 2f       	mov	r25, r24
     938:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     93c:	2b 01       	movw	r4, r22
     93e:	3c 01       	movw	r6, r24
			Kalman_Filter(1.5*(Data[1]-ACOFFSET),0.5*(Data[3]-GYOFFSET));	//Using the Kalman Filter to get the reliable output of the angle

			float Kp = 1;
			float Ki = 0;
			float Kd = 0.5;
			inputK = angle-angleHis1;
     940:	b1 01       	movw	r22, r2
     942:	88 27       	eor	r24, r24
     944:	77 fd       	sbrc	r23, 7
     946:	80 95       	com	r24
     948:	98 2f       	mov	r25, r24
     94a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     95a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
			inputI = angle;
			inputD = angle +angleHis2-2*angleHis1;
			
			Output += Kp*inputK + Ki*inputI + Kd*inputD;	//incremental PID
     95e:	88 27       	eor	r24, r24
     960:	77 fd       	sbrc	r23, 7
     962:	80 95       	com	r24
     964:	98 2f       	mov	r25, r24
     966:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     96a:	4b 01       	movw	r8, r22
     96c:	5c 01       	movw	r10, r24

			float Kp = 1;
			float Ki = 0;
			float Kd = 0.5;
			inputK = angle-angleHis1;
			inputI = angle;
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
			inputD = angle +angleHis2-2*angleHis1;
			
			Output += Kp*inputK + Ki*inputI + Kd*inputD;	//incremental PID
     976:	88 27       	eor	r24, r24
     978:	77 fd       	sbrc	r23, 7
     97a:	80 95       	com	r24
     97c:	98 2f       	mov	r25, r24
     97e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	a9 01       	movw	r20, r18
     988:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c5 01       	movw	r24, r10
     992:	b4 01       	movw	r22, r8
     994:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     998:	4b 01       	movw	r8, r22
     99a:	5c 01       	movw	r10, r24
			float Kp = 1;
			float Ki = 0;
			float Kd = 0.5;
			inputK = angle-angleHis1;
			inputI = angle;
			inputD = angle +angleHis2-2*angleHis1;
     99c:	eb 89       	ldd	r30, Y+19	; 0x13
     99e:	fc 89       	ldd	r31, Y+20	; 0x14
     9a0:	bf 01       	movw	r22, r30
     9a2:	88 27       	eor	r24, r24
     9a4:	77 fd       	sbrc	r23, 7
     9a6:	80 95       	com	r24
     9a8:	98 2f       	mov	r25, r24
     9aa:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     9ba:	6b 01       	movw	r12, r22
     9bc:	7c 01       	movw	r14, r24
     9be:	b1 01       	movw	r22, r2
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 27       	eor	r24, r24
     9c6:	77 fd       	sbrc	r23, 7
     9c8:	80 95       	com	r24
     9ca:	98 2f       	mov	r25, r24
     9cc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
     9dc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
			
			Output += Kp*inputK + Ki*inputI + Kd*inputD;	//incremental PID
     9e0:	88 27       	eor	r24, r24
     9e2:	77 fd       	sbrc	r23, 7
     9e4:	80 95       	com	r24
     9e6:	98 2f       	mov	r25, r24
     9e8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__floatsisf>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	0e 94 42 10 	call	0x2084	; 0x2084 <__mulsf3>
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	c5 01       	movw	r24, r10
     9fe:	b4 01       	movw	r22, r8
     a00:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
     a08:	c3 01       	movw	r24, r6
     a0a:	b2 01       	movw	r22, r4
     a0c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__addsf3>
     a10:	46 2f       	mov	r20, r22
     a12:	57 2f       	mov	r21, r23
     a14:	68 2f       	mov	r22, r24
     a16:	79 2f       	mov	r23, r25
     a18:	cb 01       	movw	r24, r22
     a1a:	ba 01       	movw	r22, r20
     a1c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
     a20:	8b 01       	movw	r16, r22
     a22:	9c 01       	movw	r18, r24
			//OutputHis +=Output;
			OutputHis =2000+Output;
     a24:	cb 01       	movw	r24, r22
     a26:	80 53       	subi	r24, 0x30	; 48
     a28:	98 4f       	sbci	r25, 0xF8	; 248
			if (OutputHis>4000)		//Detect the limitation of the output value
     a2a:	ff e0       	ldi	r31, 0x0F	; 15
     a2c:	81 3a       	cpi	r24, 0xA1	; 161
     a2e:	9f 07       	cpc	r25, r31
     a30:	24 f4       	brge	.+8      	; 0xa3a <main+0x1f0>
			{
				OutputHis=4000;
			}else{
				if (OutputHis<3)
     a32:	83 30       	cpi	r24, 0x03	; 3
     a34:	91 05       	cpc	r25, r1
     a36:	24 f0       	brlt	.+8      	; 0xa40 <main+0x1f6>
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <main+0x1fa>
			Output += Kp*inputK + Ki*inputI + Kd*inputD;	//incremental PID
			//OutputHis +=Output;
			OutputHis =2000+Output;
			if (OutputHis>4000)		//Detect the limitation of the output value
			{
				OutputHis=4000;
     a3a:	80 ea       	ldi	r24, 0xA0	; 160
     a3c:	9f e0       	ldi	r25, 0x0F	; 15
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <main+0x1fa>
			}else{
				if (OutputHis<3)
				{
					OutputHis=3;
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			OCR1B = OutputHis;
     a44:	aa e8       	ldi	r26, 0x8A	; 138
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	9c 93       	st	X, r25
     a4c:	8e 93       	st	-X, r24
			OCR1C = OutputHis;
     a4e:	ec e8       	ldi	r30, 0x8C	; 140
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	91 83       	std	Z+1, r25	; 0x01
     a54:	80 83       	st	Z, r24
			
			angleHis2 = angleHis1;
			angleHis1 = angle;
     a56:	60 91 56 01 	lds	r22, 0x0156
     a5a:	70 91 57 01 	lds	r23, 0x0157
     a5e:	80 91 58 01 	lds	r24, 0x0158
     a62:	90 91 59 01 	lds	r25, 0x0159
     a66:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
			
			Timer3Flag=0;
     a6a:	10 92 3d 01 	sts	0x013D, r1
     a6e:	10 92 3c 01 	sts	0x013C, r1
				}
			}
			OCR1B = OutputHis;
			OCR1C = OutputHis;
			
			angleHis2 = angleHis1;
     a72:	3c 8a       	std	Y+20, r3	; 0x14
     a74:	2b 8a       	std	Y+19, r2	; 0x13
			angleHis1 = angle;
     a76:	26 2e       	mov	r2, r22
     a78:	37 2e       	mov	r3, r23
			
			Timer3Flag=0;
		}
		if (Timer3Flag2==INTERRUPT1S)
     a7a:	80 91 3a 01 	lds	r24, 0x013A
     a7e:	90 91 3b 01 	lds	r25, 0x013B
     a82:	83 31       	cpi	r24, 0x13	; 19
     a84:	91 05       	cpc	r25, r1
     a86:	09 f0       	breq	.+2      	; 0xa8a <main+0x240>
     a88:	0f cf       	rjmp	.-482    	; 0x8a8 <main+0x5e>
		{
			tmp = angle;
     a8a:	60 91 56 01 	lds	r22, 0x0156
     a8e:	70 91 57 01 	lds	r23, 0x0157
     a92:	80 91 58 01 	lds	r24, 0x0158
     a96:	90 91 59 01 	lds	r25, 0x0159
     a9a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fixsfsi>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
			//wireless_int(tmp);
			//m_rf_send(TXaddress,&here,1);
			//m_rf_send(TXaddress,&hello,1);
			//wireless_char(hello);
			//wireless_char('\n');
			m_green(TOGGLE);
     aa2:	6a 9a       	sbi	0x0d, 2	; 13
     aa4:	2e b1       	in	r18, 0x0e	; 14
     aa6:	f4 e0       	ldi	r31, 0x04	; 4
     aa8:	2f 27       	eor	r18, r31
     aaa:	2e b9       	out	0x0e, r18	; 14
			m_usb_tx_int(tmp);
     aac:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <m_usb_tx_int>
			//m_usb_tx_int(Data[0]);
			m_usb_tx_char('\t');
     ab0:	89 e0       	ldi	r24, 0x09	; 9
     ab2:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>
			m_usb_tx_int(Data[1]);
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <m_usb_tx_int>
			//m_usb_tx_int(Data[3]);
			//m_usb_tx_char('\t');
			//m_usb_tx_int(Data[7]);
			//m_usb_tx_char('\t');
			//m_usb_tx_int(Data[8]);
			m_usb_tx_char('\n');
     abe:	8a e0       	ldi	r24, 0x0A	; 10
     ac0:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>
			Timer3Flag2=0;
     ac4:	10 92 3b 01 	sts	0x013B, r1
     ac8:	10 92 3a 01 	sts	0x013A, r1
     acc:	ed ce       	rjmp	.-550    	; 0x8a8 <main+0x5e>

00000ace <__vector_32>:
		//{
		//}
    }
}
ISR(TIMER3_COMPA_vect) //ms interrupt
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
	Timer3Flag = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	90 93 3d 01 	sts	0x013D, r25
     ae4:	80 93 3c 01 	sts	0x013C, r24
	if (Timer3Flag3<INTERRUPT10MS)
     ae8:	80 91 38 01 	lds	r24, 0x0138
     aec:	90 91 39 01 	lds	r25, 0x0139
     af0:	18 16       	cp	r1, r24
     af2:	19 06       	cpc	r1, r25
     af4:	4c f0       	brlt	.+18     	; 0xb08 <__stack+0x9>
	{
		Timer3Flag3++;
     af6:	80 91 38 01 	lds	r24, 0x0138
     afa:	90 91 39 01 	lds	r25, 0x0139
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	90 93 39 01 	sts	0x0139, r25
     b04:	80 93 38 01 	sts	0x0138, r24
	}
	if (Timer3Flag2<INTERRUPT1S)
     b08:	80 91 3a 01 	lds	r24, 0x013A
     b0c:	90 91 3b 01 	lds	r25, 0x013B
     b10:	83 31       	cpi	r24, 0x13	; 19
     b12:	91 05       	cpc	r25, r1
     b14:	4c f4       	brge	.+18     	; 0xb28 <__stack+0x29>
	{
		Timer3Flag2++;
     b16:	80 91 3a 01 	lds	r24, 0x013A
     b1a:	90 91 3b 01 	lds	r25, 0x013B
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 3b 01 	sts	0x013B, r25
     b24:	80 93 3a 01 	sts	0x013A, r24
	}
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     b36:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     b38:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     b3a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     b3c:	8c e0       	ldi	r24, 0x0C	; 12
     b3e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     b42:	e9 e6       	ldi	r30, 0x69	; 105
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 62       	ori	r24, 0x20	; 32
     b4a:	80 83       	st	Z, r24
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7e       	andi	r24, 0xEF	; 239
     b50:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     b52:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     b54:	78 94       	sei
}
     b56:	08 95       	ret

00000b58 <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
     b58:	84 e8       	ldi	r24, 0x84	; 132
     b5a:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
     b5e:	ec eb       	ldi	r30, 0xBC	; 188
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	88 23       	and	r24, r24
     b66:	ec f7       	brge	.-6      	; 0xb62 <twi_read_byte+0xa>
    return TWDR;
     b68:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
     b6c:	08 95       	ret

00000b6e <twi_stop>:

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b6e:	84 e9       	ldi	r24, 0x94	; 148
     b70:	80 93 bc 00 	sts	0x00BC, r24
}
     b74:	08 95       	ret

00000b76 <twi_wait_for_ack>:

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
     b7a:	ec eb       	ldi	r30, 0xBC	; 188
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	88 23       	and	r24, r24
     b82:	34 f0       	brlt	.+12     	; 0xb90 <twi_wait_for_ack+0x1a>
     b84:	2f 5f       	subi	r18, 0xFF	; 255
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	29 3e       	cpi	r18, 0xE9	; 233
     b8c:	38 07       	cpc	r19, r24
     b8e:	b9 f7       	brne	.-18     	; 0xb7e <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	28 3e       	cpi	r18, 0xE8	; 232
     b96:	39 07       	cpc	r19, r25
     b98:	09 f4       	brne	.+2      	; 0xb9c <twi_wait_for_ack+0x26>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	08 95       	ret

00000b9e <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     b9e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     ba2:	84 e8       	ldi	r24, 0x84	; 132
     ba4:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
     ba8:	0e 94 bb 05 	call	0xb76	; 0xb76 <twi_wait_for_ack>
     bac:	88 23       	and	r24, r24
     bae:	21 f0       	breq	.+8      	; 0xbb8 <twi_send_byte+0x1a>
     bb0:	80 91 b9 00 	lds	r24, 0x00B9
     bb4:	88 7f       	andi	r24, 0xF8	; 248
     bb6:	08 95       	ret
     bb8:	80 e0       	ldi	r24, 0x00	; 0
}
     bba:	08 95       	ret

00000bbc <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	c8 2f       	mov	r28, r24
     bc2:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     bc4:	84 ea       	ldi	r24, 0xA4	; 164
     bc6:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
     bca:	0e 94 bb 05 	call	0xb76	; 0xb76 <twi_wait_for_ack>
     bce:	88 23       	and	r24, r24
     bd0:	21 f4       	brne	.+8      	; 0xbda <twi_start+0x1e>
        twi_stop();
     bd2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <twi_stop>
        return 0; // COMM failure
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	1a c0       	rjmp	.+52     	; 0xc0e <twi_start+0x52>
    }
    
    // ADDRESS packet:
    if(readwrite)
     bda:	dd 23       	and	r29, r29
     bdc:	59 f0       	breq	.+22     	; 0xbf4 <twi_start+0x38>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
     bde:	8c 2f       	mov	r24, r28
     be0:	88 0f       	add	r24, r24
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
     be8:	88 34       	cpi	r24, 0x48	; 72
     bea:	71 f4       	brne	.+28     	; 0xc08 <twi_start+0x4c>
            twi_stop();    
     bec:	0e 94 b7 05 	call	0xb6e	; 0xb6e <twi_stop>
            return 0;	// failure
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <twi_start+0x52>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
     bf4:	8c 2f       	mov	r24, r28
     bf6:	88 0f       	add	r24, r24
     bf8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
     bfc:	80 32       	cpi	r24, 0x20	; 32
     bfe:	31 f4       	brne	.+12     	; 0xc0c <twi_start+0x50>
            twi_stop();
     c00:	0e 94 b7 05 	call	0xb6e	; 0xb6e <twi_stop>
            return 0;	// failure
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <twi_start+0x52>
        }	        
    }
    return 1;	// success
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <twi_start+0x52>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
    
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <m_write_register>:
    if(!twi_start(addr,READ)) return 0;  // START + R
	return(twi_read_byte());             // return register value
}

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	c6 2f       	mov	r28, r22
     c1a:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	0e 94 de 05 	call	0xbbc	; 0xbbc <twi_start>
     c22:	88 23       	and	r24, r24
     c24:	71 f0       	breq	.+28     	; 0xc42 <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
     c26:	8c 2f       	mov	r24, r28
     c28:	0e 94 cf 05 	call	0xb9e	; 0xb9e <twi_send_byte>
     c2c:	88 23       	and	r24, r24
     c2e:	59 f0       	breq	.+22     	; 0xc46 <m_write_register+0x32>
    if(!twi_send_byte(value)) return 0;  // value
     c30:	8d 2f       	mov	r24, r29
     c32:	0e 94 cf 05 	call	0xb9e	; 0xb9e <twi_send_byte>
     c36:	88 23       	and	r24, r24
     c38:	41 f0       	breq	.+16     	; 0xc4a <m_write_register+0x36>
    twi_stop();                          // STOP
     c3a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <twi_stop>
    return(1);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <m_write_register+0x38>
	return(twi_read_byte());             // return register value
}

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <m_write_register+0x38>
	if(!twi_send_byte(reg)) return 0;    // register to write to
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <m_write_register+0x38>
    if(!twi_send_byte(value)) return 0;  // value
     c4a:	80 e0       	ldi	r24, 0x00	; 0
    twi_stop();                          // STOP
    return(1);
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	c8 2f       	mov	r28, r24
     c58:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 de 05 	call	0xbbc	; 0xbbc <twi_start>
     c60:	88 23       	and	r24, r24
     c62:	81 f0       	breq	.+32     	; 0xc84 <m_read_register+0x32>
	if(!twi_send_byte(reg)) return 0;    // register to read
     c64:	8d 2f       	mov	r24, r29
     c66:	0e 94 cf 05 	call	0xb9e	; 0xb9e <twi_send_byte>
     c6a:	88 23       	and	r24, r24
     c6c:	69 f0       	breq	.+26     	; 0xc88 <m_read_register+0x36>
    twi_stop();                          // STOP
     c6e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <twi_stop>
    if(!twi_start(addr,READ)) return 0;  // START + R
     c72:	8c 2f       	mov	r24, r28
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	0e 94 de 05 	call	0xbbc	; 0xbbc <twi_start>
     c7a:	88 23       	and	r24, r24
     c7c:	39 f0       	breq	.+14     	; 0xc8c <m_read_register+0x3a>
	return(twi_read_byte());             // return register value
     c7e:	0e 94 ac 05 	call	0xb58	; 0xb58 <twi_read_byte>
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <m_read_register+0x3c>
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <m_read_register+0x3c>
	if(!twi_send_byte(reg)) return 0;    // register to read
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <m_read_register+0x3c>
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
     c8c:	80 e0       	ldi	r24, 0x00	; 0
	return(twi_read_byte());             // return register value
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	c8 2f       	mov	r28, r24
     c9a:	d6 2f       	mov	r29, r22
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <m_imu_init+0xe>
     ca0:	5e c0       	rjmp	.+188    	; 0xd5e <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     ca2:	64 30       	cpi	r22, 0x04	; 4
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <m_imu_init+0x14>
     ca6:	5d c0       	rjmp	.+186    	; 0xd62 <m_imu_init+0xce>

	m_bus_init();
     ca8:	0e 94 9b 05 	call	0xb36	; 0xb36 <m_bus_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cac:	8f e5       	ldi	r24, 0x5F	; 95
     cae:	9a ee       	ldi	r25, 0xEA	; 234
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	81 50       	subi	r24, 0x01	; 1
     cb4:	90 40       	sbci	r25, 0x00	; 0
     cb6:	a0 40       	sbci	r26, 0x00	; 0
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <m_imu_init+0x1e>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <m_imu_init+0x28>
     cbc:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     cbe:	89 e6       	ldi	r24, 0x69	; 105
     cc0:	65 e7       	ldi	r22, 0x75	; 117
     cc2:	0e 94 29 06 	call	0xc52	; 0xc52 <m_read_register>
     cc6:	88 36       	cpi	r24, 0x68	; 104
     cc8:	09 f0       	breq	.+2      	; 0xccc <m_imu_init+0x38>
     cca:	4d c0       	rjmp	.+154    	; 0xd66 <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
     ccc:	89 e6       	ldi	r24, 0x69	; 105
     cce:	6b e6       	ldi	r22, 0x6B	; 107
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
     cd6:	4c 2f       	mov	r20, r28
     cd8:	44 0f       	add	r20, r20
     cda:	44 0f       	add	r20, r20
     cdc:	44 0f       	add	r20, r20
     cde:	89 e6       	ldi	r24, 0x69	; 105
     ce0:	6c e1       	ldi	r22, 0x1C	; 28
     ce2:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
     ce6:	4d 2f       	mov	r20, r29
     ce8:	44 0f       	add	r20, r20
     cea:	44 0f       	add	r20, r20
     cec:	44 0f       	add	r20, r20
     cee:	89 e6       	ldi	r24, 0x69	; 105
     cf0:	6b e1       	ldi	r22, 0x1B	; 27
     cf2:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
     cf6:	89 e6       	ldi	r24, 0x69	; 105
     cf8:	67 e3       	ldi	r22, 0x37	; 55
     cfa:	42 e0       	ldi	r20, 0x02	; 2
     cfc:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
     d00:	8e e1       	ldi	r24, 0x1E	; 30
     d02:	62 e0       	ldi	r22, 0x02	; 2
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
     d0a:	89 e6       	ldi	r24, 0x69	; 105
     d0c:	67 e3       	ldi	r22, 0x37	; 55
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
     d14:	89 e6       	ldi	r24, 0x69	; 105
     d16:	64 e3       	ldi	r22, 0x34	; 52
     d18:	4e e1       	ldi	r20, 0x1E	; 30
     d1a:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    m_write_register(MIMU,0x67,0x01);
     d1e:	89 e6       	ldi	r24, 0x69	; 105
     d20:	67 e6       	ldi	r22, 0x67	; 103
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
     d28:	89 e6       	ldi	r24, 0x69	; 105
     d2a:	64 e2       	ldi	r22, 0x24	; 36
     d2c:	4d e1       	ldi	r20, 0x1D	; 29
     d2e:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
     d32:	89 e6       	ldi	r24, 0x69	; 105
     d34:	65 e2       	ldi	r22, 0x25	; 37
     d36:	4e e9       	ldi	r20, 0x9E	; 158
     d38:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
     d3c:	89 e6       	ldi	r24, 0x69	; 105
     d3e:	66 e2       	ldi	r22, 0x26	; 38
     d40:	43 e0       	ldi	r20, 0x03	; 3
     d42:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
     d46:	89 e6       	ldi	r24, 0x69	; 105
     d48:	67 e2       	ldi	r22, 0x27	; 39
     d4a:	46 e9       	ldi	r20, 0x96	; 150
     d4c:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
     d50:	89 e6       	ldi	r24, 0x69	; 105
     d52:	6a e6       	ldi	r22, 0x6A	; 106
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	0e 94 0a 06 	call	0xc14	; 0xc14 <m_write_register>
    
    return 1;   // SUCCESS!
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     d66:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	64 97       	sbiw	r28, 0x14	; 20
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	6c 01       	movw	r12, r24
     d8e:	8e 01       	movw	r16, r28
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	0f 2e       	mov	r0, r31
     d96:	fe e4       	ldi	r31, 0x4E	; 78
     d98:	ff 2e       	mov	r15, r31
     d9a:	f0 2d       	mov	r31, r0
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
     d9c:	89 e6       	ldi	r24, 0x69	; 105
     d9e:	6f 2d       	mov	r22, r15
     da0:	0e 94 29 06 	call	0xc52	; 0xc52 <m_read_register>
     da4:	f8 01       	movw	r30, r16
     da6:	81 93       	st	Z+, r24
     da8:	8f 01       	movw	r16, r30
     daa:	fa 94       	dec	r15
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
     dac:	fa e3       	ldi	r31, 0x3A	; 58
     dae:	ff 16       	cp	r15, r31
     db0:	a9 f7       	brne	.-22     	; 0xd9c <m_imu_raw+0x2e>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     db2:	8f 85       	ldd	r24, Y+15	; 0x0f
     db4:	98 89       	ldd	r25, Y+16	; 0x10
     db6:	f6 01       	movw	r30, r12
     db8:	95 83       	std	Z+5, r25	; 0x05
     dba:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     dbc:	8f 81       	ldd	r24, Y+7	; 0x07
     dbe:	98 85       	ldd	r25, Y+8	; 0x08
     dc0:	93 87       	std	Z+11, r25	; 0x0b
     dc2:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	91 8b       	std	Z+17, r25	; 0x11
     dca:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     dcc:	89 89       	ldd	r24, Y+17	; 0x11
     dce:	9a 89       	ldd	r25, Y+18	; 0x12
     dd0:	93 83       	std	Z+3, r25	; 0x03
     dd2:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	91 87       	std	Z+9, r25	; 0x09
     dda:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	97 87       	std	Z+15, r25	; 0x0f
     de2:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     de4:	8b 89       	ldd	r24, Y+19	; 0x13
     de6:	9c 89       	ldd	r25, Y+20	; 0x14
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     dec:	8b 85       	ldd	r24, Y+11	; 0x0b
     dee:	9c 85       	ldd	r25, Y+12	; 0x0c
     df0:	97 83       	std	Z+7, r25	; 0x07
     df2:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	95 87       	std	Z+13, r25	; 0x0d
     dfa:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	64 96       	adiw	r28, 0x14	; 20
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	08 95       	ret

00000e1a <m_imu_accel>:

unsigned char m_imu_accel(int* raw_data)
{
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	00 d0       	rcall	.+0      	; 0xe2a <m_imu_accel+0x10>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <m_imu_accel+0x12>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <m_imu_accel+0x14>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	6c 01       	movw	r12, r24
     e34:	8e 01       	movw	r16, r28
     e36:	0f 5f       	subi	r16, 0xFF	; 255
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	ff 24       	eor	r15, r15
     e3c:	68 94       	set
     e3e:	f6 f8       	bld	r15, 6
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
    {
        buffer[i] = m_read_register(MIMU, (0x40 - i) ); // go in reverse to get L:H order
     e40:	89 e6       	ldi	r24, 0x69	; 105
     e42:	6f 2d       	mov	r22, r15
     e44:	0e 94 29 06 	call	0xc52	; 0xc52 <m_read_register>
     e48:	f8 01       	movw	r30, r16
     e4a:	81 93       	st	Z+, r24
     e4c:	8f 01       	movw	r16, r30
     e4e:	fa 94       	dec	r15

unsigned char m_imu_accel(int* raw_data)
{
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
     e50:	fa e3       	ldi	r31, 0x3A	; 58
     e52:	ff 16       	cp	r15, r31
     e54:	a9 f7       	brne	.-22     	; 0xe40 <m_imu_accel+0x26>
        buffer[i] = m_read_register(MIMU, (0x40 - i) ); // go in reverse to get L:H order
    }
    // buffer: [AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	f6 01       	movw	r30, r12
     e5c:	95 83       	std	Z+5, r25	; 0x05
     e5e:	84 83       	std	Z+4, r24	; 0x04
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	93 83       	std	Z+3, r25	; 0x03
     e66:	82 83       	std	Z+2, r24	; 0x02
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
    }
    return 1;
}
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	26 96       	adiw	r28, 0x06	; 6
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	08 95       	ret

00000e8e <m_imu_gyro>:

unsigned char m_imu_gyro(int* raw_data)
{
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <m_imu_gyro+0x10>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <m_imu_gyro+0x12>
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <m_imu_gyro+0x14>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	6c 01       	movw	r12, r24
     ea8:	8e 01       	movw	r16, r28
     eaa:	0f 5f       	subi	r16, 0xFF	; 255
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	0f 2e       	mov	r0, r31
     eb0:	f8 e4       	ldi	r31, 0x48	; 72
     eb2:	ff 2e       	mov	r15, r31
     eb4:	f0 2d       	mov	r31, r0
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
    {
        buffer[i] = m_read_register(MIMU, (0x48 - i) ); // go in reverse to get L:H order
     eb6:	89 e6       	ldi	r24, 0x69	; 105
     eb8:	6f 2d       	mov	r22, r15
     eba:	0e 94 29 06 	call	0xc52	; 0xc52 <m_read_register>
     ebe:	f8 01       	movw	r30, r16
     ec0:	81 93       	st	Z+, r24
     ec2:	8f 01       	movw	r16, r30
     ec4:	fa 94       	dec	r15

unsigned char m_imu_gyro(int* raw_data)
{
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
     ec6:	f2 e4       	ldi	r31, 0x42	; 66
     ec8:	ff 16       	cp	r15, r31
     eca:	a9 f7       	brne	.-22     	; 0xeb6 <m_imu_gyro+0x28>
        buffer[i] = m_read_register(MIMU, (0x48 - i) ); // go in reverse to get L:H order
    }
    // buffer: [GZL, GZH, GYL, GYH, GXL, GXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[2*i]; // [2] = [GZL:GZH], [1] = [GYL:GYH], [0] = [GXL:GXH]
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	f6 01       	movw	r30, r12
     ed2:	95 83       	std	Z+5, r25	; 0x05
     ed4:	84 83       	std	Z+4, r24	; 0x04
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	93 83       	std	Z+3, r25	; 0x03
     edc:	82 83       	std	Z+2, r24	; 0x02
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
    }
    return 1;
}
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	26 96       	adiw	r28, 0x06	; 6
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <m_imu_mag>:

unsigned char m_imu_mag(int* raw_data)
{
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	00 d0       	rcall	.+0      	; 0xf14 <m_imu_mag+0x10>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <m_imu_mag+0x12>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <m_imu_mag+0x14>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	6c 01       	movw	r12, r24
     f1e:	8e 01       	movw	r16, r28
     f20:	0f 5f       	subi	r16, 0xFF	; 255
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	0f 2e       	mov	r0, r31
     f26:	fe e4       	ldi	r31, 0x4E	; 78
     f28:	ff 2e       	mov	r15, r31
     f2a:	f0 2d       	mov	r31, r0
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
     f2c:	89 e6       	ldi	r24, 0x69	; 105
     f2e:	6f 2d       	mov	r22, r15
     f30:	0e 94 29 06 	call	0xc52	; 0xc52 <m_read_register>
     f34:	f8 01       	movw	r30, r16
     f36:	81 93       	st	Z+, r24
     f38:	8f 01       	movw	r16, r30
     f3a:	fa 94       	dec	r15

unsigned char m_imu_mag(int* raw_data)
{
    int i;
    unsigned char buffer[6];    
    for(i=0;i<6;i++) // read 6 bytes
     f3c:	f8 e4       	ldi	r31, 0x48	; 72
     f3e:	ff 16       	cp	r15, r31
     f40:	a9 f7       	brne	.-22     	; 0xf2c <m_imu_mag+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[2*i]; // [2] = [MZL:MZH], [1] = [MYL:MYH], [0] = [MXL:MXH]
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	f6 01       	movw	r30, r12
     f48:	95 83       	std	Z+5, r25	; 0x05
     f4a:	84 83       	std	Z+4, r24	; 0x04
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
    }
    return 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	26 96       	adiw	r28, 0x06	; 6
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	c8 2f       	mov	r28, r24
     f82:	d6 2f       	mov	r29, r22
     f84:	14 2f       	mov	r17, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     f86:	0e 94 9b 05 	call	0xb36	; 0xb36 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     f8a:	84 ea       	ldi	r24, 0xA4	; 164
     f8c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     f90:	ec eb       	ldi	r30, 0xBC	; 188
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	ec f7       	brge	.-6      	; 0xf94 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     f9a:	80 e5       	ldi	r24, 0x50	; 80
     f9c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     fa0:	84 e8       	ldi	r24, 0x84	; 132
     fa2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     fa6:	ec eb       	ldi	r30, 0xBC	; 188
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	ec f7       	brge	.-6      	; 0xfaa <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     fb0:	80 91 b9 00 	lds	r24, 0x00B9
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     fba:	84 e9       	ldi	r24, 0x94	; 148
     fbc:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	2d c0       	rjmp	.+90     	; 0x101e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     fca:	84 e8       	ldi	r24, 0x84	; 132
     fcc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     fd0:	ec eb       	ldi	r30, 0xBC	; 188
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	ec f7       	brge	.-6      	; 0xfd4 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     fda:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     fde:	84 e8       	ldi	r24, 0x84	; 132
     fe0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     fe4:	ec eb       	ldi	r30, 0xBC	; 188
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 23       	and	r24, r24
     fec:	ec f7       	brge	.-6      	; 0xfe8 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     fee:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     ff2:	84 e8       	ldi	r24, 0x84	; 132
     ff4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     ff8:	ec eb       	ldi	r30, 0xBC	; 188
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	ec f7       	brge	.-6      	; 0xffc <m_rf_open+0x82>
	
	TWDR = packet_length;
    1002:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1006:	84 e8       	ldi	r24, 0x84	; 132
    1008:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    100c:	ec eb       	ldi	r30, 0xBC	; 188
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	ec f7       	brge	.-6      	; 0x1010 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1016:	84 e9       	ldi	r24, 0x94	; 148
    1018:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	08 95       	ret

00001026 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ac 01       	movw	r20, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    102c:	84 ea       	ldi	r24, 0xA4	; 164
    102e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1032:	ec eb       	ldi	r30, 0xBC	; 188
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 23       	and	r24, r24
    103a:	ec f7       	brge	.-6      	; 0x1036 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    103c:	81 e5       	ldi	r24, 0x51	; 81
    103e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1042:	84 e8       	ldi	r24, 0x84	; 132
    1044:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1048:	ec eb       	ldi	r30, 0xBC	; 188
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	ec f7       	brge	.-6      	; 0x104c <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1052:	80 91 b9 00 	lds	r24, 0x00B9
    1056:	88 7f       	andi	r24, 0xF8	; 248
    1058:	88 34       	cpi	r24, 0x48	; 72
    105a:	29 f4       	brne	.+10     	; 0x1066 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    105c:	84 e9       	ldi	r24, 0x94	; 148
    105e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	3e c0       	rjmp	.+124    	; 0x10e2 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1066:	84 ec       	ldi	r24, 0xC4	; 196
    1068:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    106c:	ec eb       	ldi	r30, 0xBC	; 188
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	ec f7       	brge	.-6      	; 0x1070 <m_rf_read+0x4a>
	bytes = TWDR;
    1076:	20 91 bb 00 	lds	r18, 0x00BB
	if(bytes != packet_length){
    107a:	26 17       	cp	r18, r22
    107c:	49 f4       	brne	.+18     	; 0x1090 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	21 50       	subi	r18, 0x01	; 1
    1082:	30 40       	sbci	r19, 0x00	; 0
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	44 f0       	brlt	.+16     	; 0x109a <m_rf_read+0x74>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	17 c0       	rjmp	.+46     	; 0x10be <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1090:	84 e9       	ldi	r24, 0x94	; 148
    1092:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	24 c0       	rjmp	.+72     	; 0x10e2 <m_rf_read+0xbc>
    109a:	da 01       	movw	r26, r20
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    10a0:	ec eb       	ldi	r30, 0xBC	; 188
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    10a6:	cb eb       	ldi	r28, 0xBB	; 187
    10a8:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    10aa:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    10ac:	60 81       	ld	r22, Z
    10ae:	66 23       	and	r22, r22
    10b0:	ec f7       	brge	.-6      	; 0x10ac <m_rf_read+0x86>
		buffer[i] = TWDR;
    10b2:	68 81       	ld	r22, Y
    10b4:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	82 17       	cp	r24, r18
    10ba:	93 07       	cpc	r25, r19
    10bc:	b4 f3       	brlt	.-20     	; 0x10aa <m_rf_read+0x84>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    10be:	84 e8       	ldi	r24, 0x84	; 132
    10c0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    10c4:	ec eb       	ldi	r30, 0xBC	; 188
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	ec f7       	brge	.-6      	; 0x10c8 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    10ce:	80 91 bb 00 	lds	r24, 0x00BB
    10d2:	24 0f       	add	r18, r20
    10d4:	35 1f       	adc	r19, r21
    10d6:	f9 01       	movw	r30, r18
    10d8:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    10da:	84 e9       	ldi	r24, 0x94	; 148
    10dc:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    10ec:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    10ee:	94 ea       	ldi	r25, 0xA4	; 164
    10f0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    10f4:	ec eb       	ldi	r30, 0xBC	; 188
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	90 81       	ld	r25, Z
    10fa:	99 23       	and	r25, r25
    10fc:	ec f7       	brge	.-6      	; 0x10f8 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    10fe:	90 e5       	ldi	r25, 0x50	; 80
    1100:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1104:	94 e8       	ldi	r25, 0x84	; 132
    1106:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    110a:	ec eb       	ldi	r30, 0xBC	; 188
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	90 81       	ld	r25, Z
    1110:	99 23       	and	r25, r25
    1112:	ec f7       	brge	.-6      	; 0x110e <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1114:	90 91 b9 00 	lds	r25, 0x00B9
    1118:	98 7f       	andi	r25, 0xF8	; 248
    111a:	90 32       	cpi	r25, 0x20	; 32
    111c:	31 f4       	brne	.+12     	; 0x112a <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    111e:	84 e9       	ldi	r24, 0x94	; 148
    1120:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    1124:	78 94       	sei
		return 0;
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	32 c0       	rjmp	.+100    	; 0x118e <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1130:	94 e8       	ldi	r25, 0x84	; 132
    1132:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1136:	ec eb       	ldi	r30, 0xBC	; 188
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	90 81       	ld	r25, Z
    113c:	99 23       	and	r25, r25
    113e:	ec f7       	brge	.-6      	; 0x113a <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    1140:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1144:	84 e8       	ldi	r24, 0x84	; 132
    1146:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    114a:	ec eb       	ldi	r30, 0xBC	; 188
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 23       	and	r24, r24
    1152:	ec f7       	brge	.-6      	; 0x114e <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1154:	24 2f       	mov	r18, r20
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	12 16       	cp	r1, r18
    115a:	13 06       	cpc	r1, r19
    115c:	9c f4       	brge	.+38     	; 0x1184 <m_rf_send+0x9c>
    115e:	a6 2f       	mov	r26, r22
    1160:	b7 2f       	mov	r27, r23
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    1166:	cb eb       	ldi	r28, 0xBB	; 187
    1168:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    116a:	ec eb       	ldi	r30, 0xBC	; 188
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    1170:	4d 91       	ld	r20, X+
    1172:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    1174:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    1176:	40 81       	ld	r20, Z
    1178:	44 23       	and	r20, r20
    117a:	ec f7       	brge	.-6      	; 0x1176 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	b4 f3       	brlt	.-20     	; 0x1170 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1184:	84 e9       	ldi	r24, 0x94	; 148
    1186:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    118a:	78 94       	sei
	
	return 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    119a:	80 ea       	ldi	r24, 0xA0	; 160
    119c:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    11a0:	82 e1       	ldi	r24, 0x12	; 18
    11a2:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    11a4:	09 b4       	in	r0, 0x29	; 41
    11a6:	00 fe       	sbrs	r0, 0
    11a8:	fd cf       	rjmp	.-6      	; 0x11a4 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    11aa:	80 e9       	ldi	r24, 0x90	; 144
    11ac:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    11b0:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    11b4:	10 92 3f 01 	sts	0x013F, r1
	cdc_line_rtsdtr = 0;
    11b8:	10 92 40 01 	sts	0x0140, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    11bc:	8c e0       	ldi	r24, 0x0C	; 12
    11be:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    11c2:	78 94       	sei
}
    11c4:	08 95       	ret

000011c6 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    11c6:	80 91 3f 01 	lds	r24, 0x013F
}
    11ca:	08 95       	ret

000011cc <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    11cc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11ce:	f8 94       	cli
	if (!usb_configuration) {
    11d0:	80 91 3f 01 	lds	r24, 0x013F
    11d4:	88 23       	and	r24, r24
    11d6:	19 f4       	brne	.+6      	; 0x11de <m_usb_rx_char+0x12>
		SREG = intr_state;
    11d8:	9f bf       	out	0x3f, r25	; 63
		return -1;
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    11e4:	80 91 e8 00 	lds	r24, 0x00E8
    11e8:	85 fd       	sbrc	r24, 5
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
    11ec:	9f bf       	out	0x3f, r25	; 63
		return -1;
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
    11f2:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    11f6:	20 91 e8 00 	lds	r18, 0x00E8
    11fa:	25 fd       	sbrc	r18, 5
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <m_usb_rx_char+0x38>
    11fe:	2b e6       	ldi	r18, 0x6B	; 107
    1200:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
    1204:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
    1206:	08 95       	ret

00001208 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
    1208:	9f b7       	in	r25, 0x3f	; 63
	cli();
    120a:	f8 94       	cli
	if (usb_configuration) {
    120c:	80 91 3f 01 	lds	r24, 0x013F
    1210:	88 23       	and	r24, r24
    1212:	31 f0       	breq	.+12     	; 0x1220 <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
    121a:	80 91 f2 00 	lds	r24, 0x00F2
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
    1220:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
    1222:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
    1224:	08 95       	ret

00001226 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    1226:	80 91 3f 01 	lds	r24, 0x013F
    122a:	88 23       	and	r24, r24
    122c:	89 f0       	breq	.+34     	; 0x1250 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
    122e:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1230:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	85 ff       	sbrs	r24, 5
    123e:	07 c0       	rjmp	.+14     	; 0x124e <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
    1240:	e8 ee       	ldi	r30, 0xE8	; 232
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	9b e6       	ldi	r25, 0x6B	; 107
    1246:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    1248:	80 81       	ld	r24, Z
    124a:	85 fd       	sbrc	r24, 5
    124c:	fc cf       	rjmp	.-8      	; 0x1246 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    124e:	2f bf       	out	0x3f, r18	; 63
    1250:	08 95       	ret

00001252 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1256:	90 91 3f 01 	lds	r25, 0x013F
    125a:	99 23       	and	r25, r25
    125c:	09 f4       	brne	.+2      	; 0x1260 <m_usb_tx_char+0xe>
    125e:	4d c0       	rjmp	.+154    	; 0x12fa <m_usb_tx_char+0xa8>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1260:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1262:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1264:	24 e0       	ldi	r18, 0x04	; 4
    1266:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    126a:	20 91 41 01 	lds	r18, 0x0141
    126e:	22 23       	and	r18, r18
    1270:	49 f0       	breq	.+18     	; 0x1284 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1272:	20 91 e8 00 	lds	r18, 0x00E8
    1276:	25 fd       	sbrc	r18, 5
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    127a:	9f bf       	out	0x3f, r25	; 63
			return -1;
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	42 c0       	rjmp	.+132    	; 0x1304 <m_usb_tx_char+0xb2>
		}
		transmit_previous_timeout = 0;
    1280:	10 92 41 01 	sts	0x0141, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1284:	30 91 e4 00 	lds	r19, 0x00E4
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1288:	20 91 e8 00 	lds	r18, 0x00E8
    128c:	25 fd       	sbrc	r18, 5
    128e:	26 c0       	rjmp	.+76     	; 0x12dc <m_usb_tx_char+0x8a>
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1290:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1292:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1294:	90 91 e4 00 	lds	r25, 0x00E4
    1298:	93 17       	cp	r25, r19
    129a:	49 f0       	breq	.+18     	; 0x12ae <m_usb_tx_char+0x5c>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    129c:	90 91 3f 01 	lds	r25, 0x013F
    12a0:	99 23       	and	r25, r25
    12a2:	79 f4       	brne	.+30     	; 0x12c2 <m_usb_tx_char+0x70>
    12a4:	2c c0       	rjmp	.+88     	; 0x12fe <m_usb_tx_char+0xac>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    12a6:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    12a8:	98 81       	ld	r25, Y
    12aa:	93 17       	cp	r25, r19
    12ac:	29 f4       	brne	.+10     	; 0x12b8 <m_usb_tx_char+0x66>
			transmit_previous_timeout = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 93 41 01 	sts	0x0141, r24
			return -1;
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	26 c0       	rjmp	.+76     	; 0x1304 <m_usb_tx_char+0xb2>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    12b8:	90 91 3f 01 	lds	r25, 0x013F
    12bc:	99 23       	and	r25, r25
    12be:	41 f4       	brne	.+16     	; 0x12d0 <m_usb_tx_char+0x7e>
    12c0:	20 c0       	rjmp	.+64     	; 0x1302 <m_usb_tx_char+0xb0>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    12c2:	a9 ee       	ldi	r26, 0xE9	; 233
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    12c8:	e8 ee       	ldi	r30, 0xE8	; 232
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    12cc:	c4 ee       	ldi	r28, 0xE4	; 228
    12ce:	d0 e0       	ldi	r29, 0x00	; 0
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
    12d0:	9f b7       	in	r25, 0x3f	; 63
		cli();
    12d2:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    12d4:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    12d6:	20 81       	ld	r18, Z
    12d8:	25 ff       	sbrs	r18, 5
    12da:	e5 cf       	rjmp	.-54     	; 0x12a6 <m_usb_tx_char+0x54>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    12dc:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    12e0:	80 91 e8 00 	lds	r24, 0x00E8
    12e4:	85 fd       	sbrc	r24, 5
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <m_usb_tx_char+0x9c>
    12e8:	8a e3       	ldi	r24, 0x3A	; 58
    12ea:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	80 93 3e 01 	sts	0x013E, r24
	SREG = intr_state;
    12f4:	9f bf       	out	0x3f, r25	; 63
	return 0;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <m_usb_tx_char+0xb2>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <m_usb_tx_char+0xb2>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <m_usb_tx_char+0xb2>
    1302:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <usb_serial_putchar_nowait>:
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
	uint8_t intr_state;

	if (!usb_configuration) return -1;
    130a:	90 91 3f 01 	lds	r25, 0x013F
    130e:	99 23       	and	r25, r25
    1310:	d9 f0       	breq	.+54     	; 0x1348 <usb_serial_putchar_nowait+0x3e>
	intr_state = SREG;
    1312:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1314:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1316:	94 e0       	ldi	r25, 0x04	; 4
    1318:	90 93 e9 00 	sts	0x00E9, r25
	if (!(UEINTX & (1<<RWAL))) {
    131c:	90 91 e8 00 	lds	r25, 0x00E8
    1320:	95 fd       	sbrc	r25, 5
    1322:	03 c0       	rjmp	.+6      	; 0x132a <usb_serial_putchar_nowait+0x20>
		// buffer is full
		SREG = intr_state;
    1324:	2f bf       	out	0x3f, r18	; 63
		return -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	08 95       	ret
	}
	// actually write the byte into the FIFO
	UEDATX = c;
    132a:	80 93 f1 00 	sts	0x00F1, r24
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    132e:	80 91 e8 00 	lds	r24, 0x00E8
    1332:	85 fd       	sbrc	r24, 5
    1334:	03 c0       	rjmp	.+6      	; 0x133c <usb_serial_putchar_nowait+0x32>
    1336:	8a e3       	ldi	r24, 0x3A	; 58
    1338:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	80 93 3e 01 	sts	0x013E, r24
	SREG = intr_state;
    1342:	2f bf       	out	0x3f, r18	; 63
	return 0;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
	uint8_t intr_state;

	if (!usb_configuration) return -1;
    1348:	8f ef       	ldi	r24, 0xFF	; 255
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    134a:	08 95       	ret

0000134c <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	dc 01       	movw	r26, r24
    1364:	7b 01       	movw	r14, r22
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1366:	80 91 3f 01 	lds	r24, 0x013F
    136a:	88 23       	and	r24, r24
    136c:	09 f4       	brne	.+2      	; 0x1370 <usb_serial_write+0x24>
    136e:	3a c1       	rjmp	.+628    	; 0x15e4 <usb_serial_write+0x298>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1370:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1372:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    137a:	80 91 41 01 	lds	r24, 0x0141
    137e:	88 23       	and	r24, r24
    1380:	49 f0       	breq	.+18     	; 0x1394 <usb_serial_write+0x48>
		if (!(UEINTX & (1<<RWAL))) {
    1382:	80 91 e8 00 	lds	r24, 0x00E8
    1386:	85 fd       	sbrc	r24, 5
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <usb_serial_write+0x44>
			SREG = intr_state;
    138a:	2f bf       	out	0x3f, r18	; 63
			return -1;
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	2f c1       	rjmp	.+606    	; 0x15ee <usb_serial_write+0x2a2>
		}
		transmit_previous_timeout = 0;
    1390:	10 92 41 01 	sts	0x0141, r1
	}
	// each iteration of this loop transmits a packet
	while (size) {
    1394:	e1 14       	cp	r14, r1
    1396:	f1 04       	cpc	r15, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <usb_serial_write+0x50>
    139a:	21 c1       	rjmp	.+578    	; 0x15de <usb_serial_write+0x292>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
    139c:	c4 ee       	ldi	r28, 0xE4	; 228
    139e:	d0 e0       	ldi	r29, 0x00	; 0
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
    13a0:	48 ee       	ldi	r20, 0xE8	; 232
    13a2:	50 e0       	ldi	r21, 0x00	; 0
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    13a4:	09 ee       	ldi	r16, 0xE9	; 233
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	34 e0       	ldi	r19, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f2 ef       	ldi	r31, 0xF2	; 242
    13ae:	af 2e       	mov	r10, r31
    13b0:	bb 24       	eor	r11, r11
    13b2:	f0 2d       	mov	r31, r0
    13b4:	dd 24       	eor	r13, r13
    13b6:	68 94       	set
    13b8:	d6 f8       	bld	r13, 6
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
    13ba:	61 ef       	ldi	r22, 0xF1	; 241
    13bc:	70 e0       	ldi	r23, 0x00	; 0
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    13be:	0f 2e       	mov	r0, r31
    13c0:	fa e3       	ldi	r31, 0x3A	; 58
    13c2:	9f 2e       	mov	r9, r31
    13c4:	f0 2d       	mov	r31, r0
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    13c6:	0f 2e       	mov	r0, r31
    13c8:	f5 e0       	ldi	r31, 0x05	; 5
    13ca:	cf 2e       	mov	r12, r31
    13cc:	f0 2d       	mov	r31, r0
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
    13ce:	98 81       	ld	r25, Y
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
    13d0:	fa 01       	movw	r30, r20
    13d2:	80 81       	ld	r24, Z
    13d4:	85 fd       	sbrc	r24, 5
    13d6:	20 c0       	rjmp	.+64     	; 0x1418 <usb_serial_write+0xcc>
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
    13d8:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
    13da:	2f bf       	out	0x3f, r18	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
    13dc:	88 81       	ld	r24, Y
    13de:	89 17       	cp	r24, r25
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <usb_serial_write+0xa8>
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
    13e2:	80 91 3f 01 	lds	r24, 0x013F
    13e6:	88 23       	and	r24, r24
    13e8:	79 f4       	brne	.+30     	; 0x1408 <usb_serial_write+0xbc>
    13ea:	fe c0       	rjmp	.+508    	; 0x15e8 <usb_serial_write+0x29c>
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
			SREG = intr_state;
    13ec:	2f bf       	out	0x3f, r18	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
    13ee:	88 81       	ld	r24, Y
    13f0:	89 17       	cp	r24, r25
    13f2:	29 f4       	brne	.+10     	; 0x13fe <usb_serial_write+0xb2>
				transmit_previous_timeout = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 41 01 	sts	0x0141, r24
				return -1;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	f8 c0       	rjmp	.+496    	; 0x15ee <usb_serial_write+0x2a2>
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
    13fe:	80 91 3f 01 	lds	r24, 0x013F
    1402:	88 23       	and	r24, r24
    1404:	09 f4       	brne	.+2      	; 0x1408 <usb_serial_write+0xbc>
    1406:	f2 c0       	rjmp	.+484    	; 0x15ec <usb_serial_write+0x2a0>
			// get ready to try checking again
			intr_state = SREG;
    1408:	2f b7       	in	r18, 0x3f	; 63
			cli();
    140a:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
    140c:	f8 01       	movw	r30, r16
    140e:	30 83       	st	Z, r19
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
    1410:	fa 01       	movw	r30, r20
    1412:	80 81       	ld	r24, Z
    1414:	85 ff       	sbrs	r24, 5
    1416:	ea cf       	rjmp	.-44     	; 0x13ec <usb_serial_write+0xa0>
			cli();
			UENUM = CDC_TX_ENDPOINT;
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    1418:	f5 01       	movw	r30, r10
    141a:	80 81       	ld	r24, Z
    141c:	ed 2d       	mov	r30, r13
    141e:	e8 1b       	sub	r30, r24
		if (write_size > size) write_size = size;
    1420:	8e 2f       	mov	r24, r30
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	e8 16       	cp	r14, r24
    1426:	f9 06       	cpc	r15, r25
    1428:	08 f4       	brcc	.+2      	; 0x142c <usb_serial_write+0xe0>
    142a:	ee 2d       	mov	r30, r14
		size -= write_size;
    142c:	ee 1a       	sub	r14, r30
    142e:	f1 08       	sbc	r15, r1

		// write the packet
		switch (write_size) {
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	e1 34       	cpi	r30, 0x41	; 65
    1434:	f1 05       	cpc	r31, r1
    1436:	08 f0       	brcs	.+2      	; 0x143a <usb_serial_write+0xee>
    1438:	c5 c0       	rjmp	.+394    	; 0x15c4 <usb_serial_write+0x278>
    143a:	ea 5a       	subi	r30, 0xAA	; 170
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	05 90       	lpm	r0, Z+
    1444:	f4 91       	lpm	r31, Z
    1446:	e0 2d       	mov	r30, r0
    1448:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
    144a:	8d 91       	ld	r24, X+
    144c:	fb 01       	movw	r30, r22
    144e:	80 83       	st	Z, r24
			case 63: UEDATX = *buffer++;
    1450:	8d 91       	ld	r24, X+
    1452:	fb 01       	movw	r30, r22
    1454:	80 83       	st	Z, r24
			case 62: UEDATX = *buffer++;
    1456:	8d 91       	ld	r24, X+
    1458:	fb 01       	movw	r30, r22
    145a:	80 83       	st	Z, r24
			case 61: UEDATX = *buffer++;
    145c:	8d 91       	ld	r24, X+
    145e:	fb 01       	movw	r30, r22
    1460:	80 83       	st	Z, r24
			case 60: UEDATX = *buffer++;
    1462:	8d 91       	ld	r24, X+
    1464:	fb 01       	movw	r30, r22
    1466:	80 83       	st	Z, r24
			case 59: UEDATX = *buffer++;
    1468:	8d 91       	ld	r24, X+
    146a:	fb 01       	movw	r30, r22
    146c:	80 83       	st	Z, r24
			case 58: UEDATX = *buffer++;
    146e:	8d 91       	ld	r24, X+
    1470:	fb 01       	movw	r30, r22
    1472:	80 83       	st	Z, r24
			case 57: UEDATX = *buffer++;
    1474:	8d 91       	ld	r24, X+
    1476:	fb 01       	movw	r30, r22
    1478:	80 83       	st	Z, r24
			case 56: UEDATX = *buffer++;
    147a:	8d 91       	ld	r24, X+
    147c:	fb 01       	movw	r30, r22
    147e:	80 83       	st	Z, r24
			case 55: UEDATX = *buffer++;
    1480:	8d 91       	ld	r24, X+
    1482:	fb 01       	movw	r30, r22
    1484:	80 83       	st	Z, r24
			case 54: UEDATX = *buffer++;
    1486:	8d 91       	ld	r24, X+
    1488:	fb 01       	movw	r30, r22
    148a:	80 83       	st	Z, r24
			case 53: UEDATX = *buffer++;
    148c:	8d 91       	ld	r24, X+
    148e:	fb 01       	movw	r30, r22
    1490:	80 83       	st	Z, r24
			case 52: UEDATX = *buffer++;
    1492:	8d 91       	ld	r24, X+
    1494:	fb 01       	movw	r30, r22
    1496:	80 83       	st	Z, r24
			case 51: UEDATX = *buffer++;
    1498:	8d 91       	ld	r24, X+
    149a:	fb 01       	movw	r30, r22
    149c:	80 83       	st	Z, r24
			case 50: UEDATX = *buffer++;
    149e:	8d 91       	ld	r24, X+
    14a0:	fb 01       	movw	r30, r22
    14a2:	80 83       	st	Z, r24
			case 49: UEDATX = *buffer++;
    14a4:	8d 91       	ld	r24, X+
    14a6:	fb 01       	movw	r30, r22
    14a8:	80 83       	st	Z, r24
			case 48: UEDATX = *buffer++;
    14aa:	8d 91       	ld	r24, X+
    14ac:	fb 01       	movw	r30, r22
    14ae:	80 83       	st	Z, r24
			case 47: UEDATX = *buffer++;
    14b0:	8d 91       	ld	r24, X+
    14b2:	fb 01       	movw	r30, r22
    14b4:	80 83       	st	Z, r24
			case 46: UEDATX = *buffer++;
    14b6:	8d 91       	ld	r24, X+
    14b8:	fb 01       	movw	r30, r22
    14ba:	80 83       	st	Z, r24
			case 45: UEDATX = *buffer++;
    14bc:	8d 91       	ld	r24, X+
    14be:	fb 01       	movw	r30, r22
    14c0:	80 83       	st	Z, r24
			case 44: UEDATX = *buffer++;
    14c2:	8d 91       	ld	r24, X+
    14c4:	fb 01       	movw	r30, r22
    14c6:	80 83       	st	Z, r24
			case 43: UEDATX = *buffer++;
    14c8:	8d 91       	ld	r24, X+
    14ca:	fb 01       	movw	r30, r22
    14cc:	80 83       	st	Z, r24
			case 42: UEDATX = *buffer++;
    14ce:	8d 91       	ld	r24, X+
    14d0:	fb 01       	movw	r30, r22
    14d2:	80 83       	st	Z, r24
			case 41: UEDATX = *buffer++;
    14d4:	8d 91       	ld	r24, X+
    14d6:	fb 01       	movw	r30, r22
    14d8:	80 83       	st	Z, r24
			case 40: UEDATX = *buffer++;
    14da:	8d 91       	ld	r24, X+
    14dc:	fb 01       	movw	r30, r22
    14de:	80 83       	st	Z, r24
			case 39: UEDATX = *buffer++;
    14e0:	8d 91       	ld	r24, X+
    14e2:	fb 01       	movw	r30, r22
    14e4:	80 83       	st	Z, r24
			case 38: UEDATX = *buffer++;
    14e6:	8d 91       	ld	r24, X+
    14e8:	fb 01       	movw	r30, r22
    14ea:	80 83       	st	Z, r24
			case 37: UEDATX = *buffer++;
    14ec:	8d 91       	ld	r24, X+
    14ee:	fb 01       	movw	r30, r22
    14f0:	80 83       	st	Z, r24
			case 36: UEDATX = *buffer++;
    14f2:	8d 91       	ld	r24, X+
    14f4:	fb 01       	movw	r30, r22
    14f6:	80 83       	st	Z, r24
			case 35: UEDATX = *buffer++;
    14f8:	8d 91       	ld	r24, X+
    14fa:	fb 01       	movw	r30, r22
    14fc:	80 83       	st	Z, r24
			case 34: UEDATX = *buffer++;
    14fe:	8d 91       	ld	r24, X+
    1500:	fb 01       	movw	r30, r22
    1502:	80 83       	st	Z, r24
			case 33: UEDATX = *buffer++;
    1504:	8d 91       	ld	r24, X+
    1506:	fb 01       	movw	r30, r22
    1508:	80 83       	st	Z, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    150a:	8d 91       	ld	r24, X+
    150c:	fb 01       	movw	r30, r22
    150e:	80 83       	st	Z, r24
			case 31: UEDATX = *buffer++;
    1510:	8d 91       	ld	r24, X+
    1512:	fb 01       	movw	r30, r22
    1514:	80 83       	st	Z, r24
			case 30: UEDATX = *buffer++;
    1516:	8d 91       	ld	r24, X+
    1518:	fb 01       	movw	r30, r22
    151a:	80 83       	st	Z, r24
			case 29: UEDATX = *buffer++;
    151c:	8d 91       	ld	r24, X+
    151e:	fb 01       	movw	r30, r22
    1520:	80 83       	st	Z, r24
			case 28: UEDATX = *buffer++;
    1522:	8d 91       	ld	r24, X+
    1524:	fb 01       	movw	r30, r22
    1526:	80 83       	st	Z, r24
			case 27: UEDATX = *buffer++;
    1528:	8d 91       	ld	r24, X+
    152a:	fb 01       	movw	r30, r22
    152c:	80 83       	st	Z, r24
			case 26: UEDATX = *buffer++;
    152e:	8d 91       	ld	r24, X+
    1530:	fb 01       	movw	r30, r22
    1532:	80 83       	st	Z, r24
			case 25: UEDATX = *buffer++;
    1534:	8d 91       	ld	r24, X+
    1536:	fb 01       	movw	r30, r22
    1538:	80 83       	st	Z, r24
			case 24: UEDATX = *buffer++;
    153a:	8d 91       	ld	r24, X+
    153c:	fb 01       	movw	r30, r22
    153e:	80 83       	st	Z, r24
			case 23: UEDATX = *buffer++;
    1540:	8d 91       	ld	r24, X+
    1542:	fb 01       	movw	r30, r22
    1544:	80 83       	st	Z, r24
			case 22: UEDATX = *buffer++;
    1546:	8d 91       	ld	r24, X+
    1548:	fb 01       	movw	r30, r22
    154a:	80 83       	st	Z, r24
			case 21: UEDATX = *buffer++;
    154c:	8d 91       	ld	r24, X+
    154e:	fb 01       	movw	r30, r22
    1550:	80 83       	st	Z, r24
			case 20: UEDATX = *buffer++;
    1552:	8d 91       	ld	r24, X+
    1554:	fb 01       	movw	r30, r22
    1556:	80 83       	st	Z, r24
			case 19: UEDATX = *buffer++;
    1558:	8d 91       	ld	r24, X+
    155a:	fb 01       	movw	r30, r22
    155c:	80 83       	st	Z, r24
			case 18: UEDATX = *buffer++;
    155e:	8d 91       	ld	r24, X+
    1560:	fb 01       	movw	r30, r22
    1562:	80 83       	st	Z, r24
			case 17: UEDATX = *buffer++;
    1564:	8d 91       	ld	r24, X+
    1566:	fb 01       	movw	r30, r22
    1568:	80 83       	st	Z, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    156a:	8d 91       	ld	r24, X+
    156c:	fb 01       	movw	r30, r22
    156e:	80 83       	st	Z, r24
			case 15: UEDATX = *buffer++;
    1570:	8d 91       	ld	r24, X+
    1572:	fb 01       	movw	r30, r22
    1574:	80 83       	st	Z, r24
			case 14: UEDATX = *buffer++;
    1576:	8d 91       	ld	r24, X+
    1578:	fb 01       	movw	r30, r22
    157a:	80 83       	st	Z, r24
			case 13: UEDATX = *buffer++;
    157c:	8d 91       	ld	r24, X+
    157e:	fb 01       	movw	r30, r22
    1580:	80 83       	st	Z, r24
			case 12: UEDATX = *buffer++;
    1582:	8d 91       	ld	r24, X+
    1584:	fb 01       	movw	r30, r22
    1586:	80 83       	st	Z, r24
			case 11: UEDATX = *buffer++;
    1588:	8d 91       	ld	r24, X+
    158a:	fb 01       	movw	r30, r22
    158c:	80 83       	st	Z, r24
			case 10: UEDATX = *buffer++;
    158e:	8d 91       	ld	r24, X+
    1590:	fb 01       	movw	r30, r22
    1592:	80 83       	st	Z, r24
			case  9: UEDATX = *buffer++;
    1594:	8d 91       	ld	r24, X+
    1596:	fb 01       	movw	r30, r22
    1598:	80 83       	st	Z, r24
			#endif
			case  8: UEDATX = *buffer++;
    159a:	8d 91       	ld	r24, X+
    159c:	fb 01       	movw	r30, r22
    159e:	80 83       	st	Z, r24
			case  7: UEDATX = *buffer++;
    15a0:	8d 91       	ld	r24, X+
    15a2:	fb 01       	movw	r30, r22
    15a4:	80 83       	st	Z, r24
			case  6: UEDATX = *buffer++;
    15a6:	8d 91       	ld	r24, X+
    15a8:	fb 01       	movw	r30, r22
    15aa:	80 83       	st	Z, r24
			case  5: UEDATX = *buffer++;
    15ac:	8d 91       	ld	r24, X+
    15ae:	fb 01       	movw	r30, r22
    15b0:	80 83       	st	Z, r24
			case  4: UEDATX = *buffer++;
    15b2:	8d 91       	ld	r24, X+
    15b4:	fb 01       	movw	r30, r22
    15b6:	80 83       	st	Z, r24
			case  3: UEDATX = *buffer++;
    15b8:	8d 91       	ld	r24, X+
    15ba:	fb 01       	movw	r30, r22
    15bc:	80 83       	st	Z, r24
			case  2: UEDATX = *buffer++;
    15be:	8d 91       	ld	r24, X+
    15c0:	fb 01       	movw	r30, r22
    15c2:	80 83       	st	Z, r24
			default:
			case  1: UEDATX = *buffer++;
    15c4:	8d 91       	ld	r24, X+
    15c6:	fb 01       	movw	r30, r22
    15c8:	80 83       	st	Z, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    15ca:	fa 01       	movw	r30, r20
    15cc:	80 81       	ld	r24, Z
    15ce:	85 ff       	sbrs	r24, 5
    15d0:	90 82       	st	Z, r9
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    15d2:	c0 92 3e 01 	sts	0x013E, r12
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    15d6:	e1 14       	cp	r14, r1
    15d8:	f1 04       	cpc	r15, r1
    15da:	09 f0       	breq	.+2      	; 0x15de <usb_serial_write+0x292>
    15dc:	f8 ce       	rjmp	.-528    	; 0x13ce <usb_serial_write+0x82>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    15de:	2f bf       	out	0x3f, r18	; 63
	return 0;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <usb_serial_write+0x2a2>
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <usb_serial_write+0x2a2>
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <usb_serial_write+0x2a2>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	08 95       	ret

00001606 <m_usb_tx_push>:
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
	uint8_t intr_state;

	intr_state = SREG;
    1606:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1608:	f8 94       	cli
	if (transmit_flush_timer) {
    160a:	90 91 3e 01 	lds	r25, 0x013E
    160e:	99 23       	and	r25, r25
    1610:	41 f0       	breq	.+16     	; 0x1622 <m_usb_tx_push+0x1c>
		UENUM = CDC_TX_ENDPOINT;
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	90 93 e9 00 	sts	0x00E9, r25
		UEINTX = 0x3A;
    1618:	9a e3       	ldi	r25, 0x3A	; 58
    161a:	90 93 e8 00 	sts	0x00E8, r25
		transmit_flush_timer = 0;
    161e:	10 92 3e 01 	sts	0x013E, r1
	}
	SREG = intr_state;
    1622:	8f bf       	out	0x3f, r24	; 63
}
    1624:	08 95       	ret

00001626 <usb_serial_get_stopbits>:
//	return *(uint32_t *)cdc_line_coding;
//}
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
    1626:	80 91 25 01 	lds	r24, 0x0125
    162a:	08 95       	ret

0000162c <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
    162c:	80 91 26 01 	lds	r24, 0x0126
    1630:	08 95       	ret

00001632 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
    1632:	80 91 27 01 	lds	r24, 0x0127
    1636:	08 95       	ret

00001638 <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    1638:	80 91 40 01 	lds	r24, 0x0140
    163c:	08 95       	ret

0000163e <usb_serial_set_control>:
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
	uint8_t intr_state;

	intr_state = SREG;
    163e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1640:	f8 94       	cli
	if (!usb_configuration) {
    1642:	90 91 3f 01 	lds	r25, 0x013F
    1646:	99 23       	and	r25, r25
    1648:	19 f4       	brne	.+6      	; 0x1650 <usb_serial_set_control+0x12>
		// we're not enumerated/configured
		SREG = intr_state;
    164a:	2f bf       	out	0x3f, r18	; 63
		return -1;
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	08 95       	ret
	}

	UENUM = CDC_ACM_ENDPOINT;
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	90 93 e9 00 	sts	0x00E9, r25
	if (!(UEINTX & (1<<RWAL))) {
    1656:	90 91 e8 00 	lds	r25, 0x00E8
    165a:	95 fd       	sbrc	r25, 5
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <usb_serial_set_control+0x26>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    165e:	2f bf       	out	0x3f, r18	; 63
		return -1;
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	08 95       	ret
	}
	UEDATX = 0xA1;
    1664:	e1 ef       	ldi	r30, 0xF1	; 241
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	91 ea       	ldi	r25, 0xA1	; 161
    166a:	90 83       	st	Z, r25
	UEDATX = 0x20;
    166c:	90 e2       	ldi	r25, 0x20	; 32
    166e:	90 83       	st	Z, r25
	UEDATX = 0;
    1670:	10 82       	st	Z, r1
	UEDATX = 0;
    1672:	10 82       	st	Z, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    1674:	10 82       	st	Z, r1
	UEDATX = 0;
    1676:	10 82       	st	Z, r1
	UEDATX = 2;
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	90 83       	st	Z, r25
	UEDATX = 0;
    167c:	10 82       	st	Z, r1
	UEDATX = signals;
    167e:	80 83       	st	Z, r24
	UEDATX = 0;
    1680:	10 82       	st	Z, r1
	UEINTX = 0x3A;
    1682:	8a e3       	ldi	r24, 0x3A	; 58
    1684:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    1688:	2f bf       	out	0x3f, r18	; 63
	return 0;
    168a:	80 e0       	ldi	r24, 0x00	; 0
}
    168c:	08 95       	ret

0000168e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    16a0:	e1 ee       	ldi	r30, 0xE1	; 225
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
        UDINT = 0;
    16a6:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    16a8:	83 ff       	sbrs	r24, 3
    16aa:	11 c0       	rjmp	.+34     	; 0x16ce <__vector_10+0x40>
		UENUM = 0;
    16ac:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    16b6:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    16ba:	92 e1       	ldi	r25, 0x12	; 18
    16bc:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    16c0:	98 e0       	ldi	r25, 0x08	; 8
    16c2:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    16c6:	10 92 3f 01 	sts	0x013F, r1
		cdc_line_rtsdtr = 0;
    16ca:	10 92 40 01 	sts	0x0140, r1
        }
	if (intbits & (1<<SOFI)) {
    16ce:	82 ff       	sbrs	r24, 2
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <__vector_10+0x6a>
		if (usb_configuration) {
    16d2:	80 91 3f 01 	lds	r24, 0x013F
    16d6:	88 23       	and	r24, r24
    16d8:	79 f0       	breq	.+30     	; 0x16f8 <__vector_10+0x6a>
			t = transmit_flush_timer;
    16da:	80 91 3e 01 	lds	r24, 0x013E
			if (t) {
    16de:	88 23       	and	r24, r24
    16e0:	59 f0       	breq	.+22     	; 0x16f8 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    16e2:	81 50       	subi	r24, 0x01	; 1
    16e4:	80 93 3e 01 	sts	0x013E, r24
				if (!t) {
    16e8:	88 23       	and	r24, r24
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    16f2:	8a e3       	ldi	r24, 0x3A	; 58
    16f4:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    16f8:	ff 91       	pop	r31
    16fa:	ef 91       	pop	r30
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	2f 93       	push	r18
    171a:	3f 93       	push	r19
    171c:	4f 93       	push	r20
    171e:	5f 93       	push	r21
    1720:	6f 93       	push	r22
    1722:	7f 93       	push	r23
    1724:	8f 93       	push	r24
    1726:	9f 93       	push	r25
    1728:	af 93       	push	r26
    172a:	bf 93       	push	r27
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1734:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1738:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    173c:	83 ff       	sbrs	r24, 3
    173e:	5b c1       	rjmp	.+694    	; 0x19f6 <__vector_11+0x2ec>
                bmRequestType = UEDATX;
    1740:	e1 ef       	ldi	r30, 0xF1	; 241
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	40 81       	ld	r20, Z
                bRequest = UEDATX;
    1746:	50 81       	ld	r21, Z
                wValue = UEDATX;
    1748:	60 81       	ld	r22, Z
    174a:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    174c:	20 81       	ld	r18, Z
    174e:	92 2f       	mov	r25, r18
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	68 2b       	or	r22, r24
    1754:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    1756:	20 81       	ld	r18, Z
    1758:	30 e0       	ldi	r19, 0x00	; 0
                wIndex |= (UEDATX << 8);
    175a:	a0 81       	ld	r26, Z
    175c:	9a 2f       	mov	r25, r26
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	dc 01       	movw	r26, r24
    1762:	a2 2b       	or	r26, r18
    1764:	b3 2b       	or	r27, r19
                wLength = UEDATX;
    1766:	30 81       	ld	r19, Z
                wLength |= (UEDATX << 8);
    1768:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    176a:	82 ef       	ldi	r24, 0xF2	; 242
    176c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1770:	56 30       	cpi	r21, 0x06	; 6
    1772:	09 f0       	breq	.+2      	; 0x1776 <__vector_11+0x6c>
    1774:	63 c0       	rjmp	.+198    	; 0x183c <__vector_11+0x132>
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__vector_11+0x76>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1778:	81 e2       	ldi	r24, 0x21	; 33
    177a:	80 93 eb 00 	sts	0x00EB, r24
					return;
    177e:	3e c1       	rjmp	.+636    	; 0x19fc <__vector_11+0x2f2>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1780:	26 e0       	ldi	r18, 0x06	; 6
    1782:	4e e2       	ldi	r20, 0x2E	; 46
    1784:	51 e0       	ldi	r21, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1786:	fa 01       	movw	r30, r20
    1788:	85 91       	lpm	r24, Z+
    178a:	94 91       	lpm	r25, Z
				if (desc_val != wValue) {
    178c:	68 17       	cp	r22, r24
    178e:	79 07       	cpc	r23, r25
    1790:	19 f0       	breq	.+6      	; 0x1798 <__vector_11+0x8e>
					list += sizeof(struct descriptor_list_struct);
    1792:	49 5f       	subi	r20, 0xF9	; 249
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1796:	24 c0       	rjmp	.+72     	; 0x17e0 <__vector_11+0xd6>
				}
				list += 2;
    1798:	fa 01       	movw	r30, r20
    179a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    179c:	85 91       	lpm	r24, Z+
    179e:	94 91       	lpm	r25, Z
				if (desc_val != wIndex) {
    17a0:	a8 17       	cp	r26, r24
    17a2:	b9 07       	cpc	r27, r25
    17a4:	19 f0       	breq	.+6      	; 0x17ac <__vector_11+0xa2>
					list += sizeof(struct descriptor_list_struct)-2;
    17a6:	49 5f       	subi	r20, 0xF9	; 249
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    17aa:	1a c0       	rjmp	.+52     	; 0x17e0 <__vector_11+0xd6>
				}
				list += 2;
    17ac:	fa 01       	movw	r30, r20
    17ae:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    17b0:	85 91       	lpm	r24, Z+
    17b2:	94 91       	lpm	r25, Z
    17b4:	68 2f       	mov	r22, r24
    17b6:	79 2f       	mov	r23, r25
				list += 2;
    17b8:	4a 5f       	subi	r20, 0xFA	; 250
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
				desc_length = pgm_read_byte(list);
    17bc:	fa 01       	movw	r30, r20
    17be:	44 91       	lpm	r20, Z
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    17c0:	23 2f       	mov	r18, r19
    17c2:	30 e0       	ldi	r19, 0x00	; 0
                wLength |= (UEDATX << 8);
    17c4:	9c 2f       	mov	r25, r28
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	82 2b       	or	r24, r18
    17ca:	93 2b       	or	r25, r19
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    17cc:	8f 3f       	cpi	r24, 0xFF	; 255
    17ce:	91 05       	cpc	r25, r1
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <__vector_11+0xce>
    17d2:	10 f0       	brcs	.+4      	; 0x17d8 <__vector_11+0xce>
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	84 17       	cp	r24, r20
    17da:	28 f4       	brcc	.+10     	; 0x17e6 <__vector_11+0xdc>
    17dc:	48 2f       	mov	r20, r24
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <__vector_11+0xdc>
    17e0:	21 50       	subi	r18, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    17e2:	89 f6       	brne	.-94     	; 0x1786 <__vector_11+0x7c>
    17e4:	c9 cf       	rjmp	.-110    	; 0x1778 <__vector_11+0x6e>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17e6:	c8 ee       	ldi	r28, 0xE8	; 232
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17ea:	5e ef       	ldi	r21, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    17ec:	a1 ef       	ldi	r26, 0xF1	; 241
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17f0:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17f2:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 01       	movw	r18, r24
    17f8:	25 70       	andi	r18, 0x05	; 5
    17fa:	30 70       	andi	r19, 0x00	; 0
    17fc:	21 15       	cp	r18, r1
    17fe:	31 05       	cpc	r19, r1
    1800:	c1 f3       	breq	.-16     	; 0x17f2 <__vector_11+0xe8>
				if (i & (1<<RXOUTI)) return;	// abort
    1802:	82 fd       	sbrc	r24, 2
    1804:	fb c0       	rjmp	.+502    	; 0x19fc <__vector_11+0x2f2>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1806:	24 2f       	mov	r18, r20
    1808:	41 31       	cpi	r20, 0x11	; 17
    180a:	08 f0       	brcs	.+2      	; 0x180e <__vector_11+0x104>
    180c:	21 2f       	mov	r18, r17
				for (i = n; i; i--) {
    180e:	22 23       	and	r18, r18
    1810:	71 f0       	breq	.+28     	; 0x182e <__vector_11+0x124>
    1812:	cb 01       	movw	r24, r22
    1814:	32 2f       	mov	r19, r18
					UEDATX = pgm_read_byte(desc_addr++);
    1816:	fc 01       	movw	r30, r24
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	e4 91       	lpm	r30, Z
    181c:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    181e:	31 50       	subi	r19, 0x01	; 1
    1820:	d1 f7       	brne	.-12     	; 0x1816 <__vector_11+0x10c>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1822:	82 2f       	mov	r24, r18
    1824:	81 50       	subi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	01 96       	adiw	r24, 0x01	; 1
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    182a:	68 0f       	add	r22, r24
    182c:	79 1f       	adc	r23, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    182e:	42 1b       	sub	r20, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1830:	58 83       	st	Y, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1832:	44 23       	and	r20, r20
    1834:	f1 f6       	brne	.-68     	; 0x17f2 <__vector_11+0xe8>
    1836:	20 31       	cpi	r18, 0x10	; 16
    1838:	e1 f2       	breq	.-72     	; 0x17f2 <__vector_11+0xe8>
    183a:	e0 c0       	rjmp	.+448    	; 0x19fc <__vector_11+0x2f2>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    183c:	55 30       	cpi	r21, 0x05	; 5
    183e:	61 f4       	brne	.+24     	; 0x1858 <__vector_11+0x14e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1840:	8e ef       	ldi	r24, 0xFE	; 254
    1842:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1846:	e8 ee       	ldi	r30, 0xE8	; 232
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 ff       	sbrs	r24, 0
    184e:	fd cf       	rjmp	.-6      	; 0x184a <__vector_11+0x140>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1850:	60 68       	ori	r22, 0x80	; 128
    1852:	60 93 e3 00 	sts	0x00E3, r22
			return;
    1856:	d2 c0       	rjmp	.+420    	; 0x19fc <__vector_11+0x2f2>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1858:	59 30       	cpi	r21, 0x09	; 9
    185a:	a1 f5       	brne	.+104    	; 0x18c4 <__vector_11+0x1ba>
    185c:	44 23       	and	r20, r20
    185e:	91 f5       	brne	.+100    	; 0x18c4 <__vector_11+0x1ba>
			usb_configuration = wValue;
    1860:	60 93 3f 01 	sts	0x013F, r22
			cdc_line_rtsdtr = 0;
    1864:	10 92 40 01 	sts	0x0140, r1
			transmit_flush_timer = 0;
    1868:	10 92 3e 01 	sts	0x013E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    186c:	8e ef       	ldi	r24, 0xFE	; 254
    186e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1872:	41 e0       	ldi	r20, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1874:	28 e5       	ldi	r18, 0x58	; 88
    1876:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1878:	a9 ee       	ldi	r26, 0xE9	; 233
    187a:	b0 e0       	ldi	r27, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    187c:	cb ee       	ldi	r28, 0xEB	; 235
    187e:	d0 e0       	ldi	r29, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1880:	6c ee       	ldi	r22, 0xEC	; 236
    1882:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1884:	0d ee       	ldi	r16, 0xED	; 237
    1886:	10 e0       	ldi	r17, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1888:	4c 93       	st	X, r20
				en = pgm_read_byte(cfg++);
    188a:	c9 01       	movw	r24, r18
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	f9 01       	movw	r30, r18
    1890:	54 91       	lpm	r21, Z
				UECONX = en;
    1892:	58 83       	st	Y, r21
				if (en) {
    1894:	55 23       	and	r21, r21
    1896:	61 f0       	breq	.+24     	; 0x18b0 <__vector_11+0x1a6>
					UECFG0X = pgm_read_byte(cfg++);
    1898:	fc 01       	movw	r30, r24
    189a:	84 91       	lpm	r24, Z
    189c:	fb 01       	movw	r30, r22
    189e:	80 83       	st	Z, r24
    18a0:	f9 01       	movw	r30, r18
    18a2:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    18a4:	2d 5f       	subi	r18, 0xFD	; 253
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	84 91       	lpm	r24, Z
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <__vector_11+0x1a8>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    18b0:	9c 01       	movw	r18, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    18b2:	4f 5f       	subi	r20, 0xFF	; 255
    18b4:	45 30       	cpi	r20, 0x05	; 5
    18b6:	41 f7       	brne	.-48     	; 0x1888 <__vector_11+0x17e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    18b8:	ea ee       	ldi	r30, 0xEA	; 234
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8e e1       	ldi	r24, 0x1E	; 30
    18be:	80 83       	st	Z, r24
        		UERST = 0;
    18c0:	10 82       	st	Z, r1
			return;
    18c2:	9c c0       	rjmp	.+312    	; 0x19fc <__vector_11+0x2f2>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    18c4:	58 30       	cpi	r21, 0x08	; 8
    18c6:	79 f4       	brne	.+30     	; 0x18e6 <__vector_11+0x1dc>
    18c8:	40 38       	cpi	r20, 0x80	; 128
    18ca:	69 f4       	brne	.+26     	; 0x18e6 <__vector_11+0x1dc>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18cc:	e8 ee       	ldi	r30, 0xE8	; 232
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 ff       	sbrs	r24, 0
    18d4:	fd cf       	rjmp	.-6      	; 0x18d0 <__vector_11+0x1c6>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    18d6:	80 91 3f 01 	lds	r24, 0x013F
    18da:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18de:	8e ef       	ldi	r24, 0xFE	; 254
    18e0:	80 93 e8 00 	sts	0x00E8, r24
    18e4:	8b c0       	rjmp	.+278    	; 0x19fc <__vector_11+0x2f2>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    18e6:	51 32       	cpi	r21, 0x21	; 33
    18e8:	b1 f4       	brne	.+44     	; 0x1916 <__vector_11+0x20c>
    18ea:	41 3a       	cpi	r20, 0xA1	; 161
    18ec:	a1 f4       	brne	.+40     	; 0x1916 <__vector_11+0x20c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18ee:	e8 ee       	ldi	r30, 0xE8	; 232
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 ff       	sbrs	r24, 0
    18f6:	fd cf       	rjmp	.-6      	; 0x18f2 <__vector_11+0x1e8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    18f8:	e1 e2       	ldi	r30, 0x21	; 33
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	cf 01       	movw	r24, r30
    18fe:	07 96       	adiw	r24, 0x07	; 7
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1900:	a1 ef       	ldi	r26, 0xF1	; 241
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	21 91       	ld	r18, Z+
    1906:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1908:	e8 17       	cp	r30, r24
    190a:	f9 07       	cpc	r31, r25
    190c:	d9 f7       	brne	.-10     	; 0x1904 <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    190e:	8e ef       	ldi	r24, 0xFE	; 254
    1910:	80 93 e8 00 	sts	0x00E8, r24
    1914:	73 c0       	rjmp	.+230    	; 0x19fc <__vector_11+0x2f2>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1916:	50 32       	cpi	r21, 0x20	; 32
    1918:	c9 f4       	brne	.+50     	; 0x194c <__vector_11+0x242>
    191a:	41 32       	cpi	r20, 0x21	; 33
    191c:	b9 f4       	brne	.+46     	; 0x194c <__vector_11+0x242>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    191e:	e8 ee       	ldi	r30, 0xE8	; 232
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	82 ff       	sbrs	r24, 2
    1926:	fd cf       	rjmp	.-6      	; 0x1922 <__vector_11+0x218>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1928:	e1 e2       	ldi	r30, 0x21	; 33
    192a:	f1 e0       	ldi	r31, 0x01	; 1
    192c:	cf 01       	movw	r24, r30
    192e:	07 96       	adiw	r24, 0x07	; 7
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1930:	a1 ef       	ldi	r26, 0xF1	; 241
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	2c 91       	ld	r18, X
    1936:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1938:	e8 17       	cp	r30, r24
    193a:	f9 07       	cpc	r31, r25
    193c:	d9 f7       	brne	.-10     	; 0x1934 <__vector_11+0x22a>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    193e:	e8 ee       	ldi	r30, 0xE8	; 232
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8b ef       	ldi	r24, 0xFB	; 251
    1944:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1946:	8e ef       	ldi	r24, 0xFE	; 254
    1948:	80 83       	st	Z, r24
    194a:	58 c0       	rjmp	.+176    	; 0x19fc <__vector_11+0x2f2>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    194c:	52 32       	cpi	r21, 0x22	; 34
    194e:	69 f4       	brne	.+26     	; 0x196a <__vector_11+0x260>
    1950:	41 32       	cpi	r20, 0x21	; 33
    1952:	59 f4       	brne	.+22     	; 0x196a <__vector_11+0x260>
			cdc_line_rtsdtr = wValue;
    1954:	60 93 40 01 	sts	0x0140, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1958:	e8 ee       	ldi	r30, 0xE8	; 232
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 ff       	sbrs	r24, 0
    1960:	fd cf       	rjmp	.-6      	; 0x195c <__vector_11+0x252>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1962:	8e ef       	ldi	r24, 0xFE	; 254
    1964:	80 93 e8 00 	sts	0x00E8, r24
    1968:	49 c0       	rjmp	.+146    	; 0x19fc <__vector_11+0x2f2>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    196a:	55 23       	and	r21, r21
    196c:	d1 f4       	brne	.+52     	; 0x19a2 <__vector_11+0x298>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    196e:	e8 ee       	ldi	r30, 0xE8	; 232
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	80 ff       	sbrs	r24, 0
    1976:	fd cf       	rjmp	.-6      	; 0x1972 <__vector_11+0x268>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1978:	42 38       	cpi	r20, 0x82	; 130
    197a:	51 f4       	brne	.+20     	; 0x1990 <__vector_11+0x286>
				UENUM = wIndex;
    197c:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    1980:	90 91 eb 00 	lds	r25, 0x00EB
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	95 ff       	sbrs	r25, 5
    1988:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
    198a:	10 92 e9 00 	sts	0x00E9, r1
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <__vector_11+0x288>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1990:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1992:	e1 ef       	ldi	r30, 0xF1	; 241
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 83       	st	Z, r24
			UEDATX = 0;
    1998:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    199a:	8e ef       	ldi	r24, 0xFE	; 254
    199c:	80 93 e8 00 	sts	0x00E8, r24
    19a0:	2d c0       	rjmp	.+90     	; 0x19fc <__vector_11+0x2f2>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    19a2:	51 30       	cpi	r21, 0x01	; 1
    19a4:	11 f0       	breq	.+4      	; 0x19aa <__vector_11+0x2a0>
    19a6:	53 30       	cpi	r21, 0x03	; 3
    19a8:	31 f5       	brne	.+76     	; 0x19f6 <__vector_11+0x2ec>
		  && bmRequestType == 0x02 && wValue == 0) {
    19aa:	42 30       	cpi	r20, 0x02	; 2
    19ac:	21 f5       	brne	.+72     	; 0x19f6 <__vector_11+0x2ec>
    19ae:	61 15       	cp	r22, r1
    19b0:	71 05       	cpc	r23, r1
    19b2:	09 f5       	brne	.+66     	; 0x19f6 <__vector_11+0x2ec>
			i = wIndex & 0x7F;
    19b4:	8a 2f       	mov	r24, r26
    19b6:	8f 77       	andi	r24, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    19b8:	98 2f       	mov	r25, r24
    19ba:	91 50       	subi	r25, 0x01	; 1
    19bc:	94 30       	cpi	r25, 0x04	; 4
    19be:	d8 f4       	brcc	.+54     	; 0x19f6 <__vector_11+0x2ec>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19c0:	9e ef       	ldi	r25, 0xFE	; 254
    19c2:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    19c6:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    19ca:	53 30       	cpi	r21, 0x03	; 3
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <__vector_11+0x2cc>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    19ce:	81 e2       	ldi	r24, 0x21	; 33
    19d0:	80 93 eb 00 	sts	0x00EB, r24
    19d4:	13 c0       	rjmp	.+38     	; 0x19fc <__vector_11+0x2f2>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    19d6:	99 e1       	ldi	r25, 0x19	; 25
    19d8:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <__vector_11+0x2de>
    19e4:	44 0f       	add	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <__vector_11+0x2da>
    19ec:	ea ee       	ldi	r30, 0xEA	; 234
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	40 83       	st	Z, r20
					UERST = 0;
    19f2:	10 82       	st	Z, r1
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <__vector_11+0x2f2>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    19f6:	81 e2       	ldi	r24, 0x21	; 33
    19f8:	80 93 eb 00 	sts	0x00EB, r24
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	c4 91       	lpm	r28, Z
		if (!c) break;
    1a30:	cc 23       	and	r28, r28
    1a32:	89 f0       	breq	.+34     	; 0x1a56 <print_P+0x30>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a34:	8c 01       	movw	r16, r24
    1a36:	0f 5f       	subi	r16, 0xFF	; 255
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
		if (c == '\n') usb_tx_char('\r');
    1a3a:	ca 30       	cpi	r28, 0x0A	; 10
    1a3c:	19 f4       	brne	.+6      	; 0x1a44 <print_P+0x1e>
    1a3e:	8d e0       	ldi	r24, 0x0D	; 13
    1a40:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>
		usb_tx_char(c);
    1a44:	8c 2f       	mov	r24, r28
    1a46:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	0f 5f       	subi	r16, 0xFF	; 255
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	c4 91       	lpm	r28, Z
		if (!c) break;
    1a52:	cc 23       	and	r28, r28
    1a54:	91 f7       	brne	.-28     	; 0x1a3a <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <phex1>:

void phex1(unsigned char c)
{
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    1a5e:	8a 30       	cpi	r24, 0x0A	; 10
    1a60:	10 f4       	brcc	.+4      	; 0x1a66 <phex1+0x8>
    1a62:	90 e3       	ldi	r25, 0x30	; 48
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <phex1+0xa>
    1a66:	97 e3       	ldi	r25, 0x37	; 55
    1a68:	89 0f       	add	r24, r25
    1a6a:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>
}
    1a6e:	08 95       	ret

00001a70 <phex>:

void phex(unsigned char c)
{
    1a70:	cf 93       	push	r28
    1a72:	c8 2f       	mov	r28, r24
	phex1(c >> 4);
    1a74:	82 95       	swap	r24
    1a76:	8f 70       	andi	r24, 0x0F	; 15
    1a78:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <phex1>
	phex1(c & 15);
    1a7c:	8c 2f       	mov	r24, r28
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <phex1>
}
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    1a88:	cf 93       	push	r28
    1a8a:	c8 2f       	mov	r28, r24
	phex(i >> 8);
    1a8c:	89 2f       	mov	r24, r25
    1a8e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <phex>
	phex(i);
    1a92:	8c 2f       	mov	r24, r28
    1a94:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <phex>
}
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <m_usb_tx_hexchar>:

void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
    1a9c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <phex>
}
    1aa0:	08 95       	ret

00001aa2 <m_usb_tx_int>:

void m_usb_tx_int(int i)
{
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	27 97       	sbiw	r28, 0x07	; 7
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1abe:	8e 01       	movw	r16, r28
    1ac0:	0f 5f       	subi	r16, 0xFF	; 255
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	27 e0       	ldi	r18, 0x07	; 7
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	11 92       	st	Z+, r1
    1aca:	2a 95       	dec	r18
    1acc:	e9 f7       	brne	.-6      	; 0x1ac8 <m_usb_tx_int+0x26>
	itoa(i,string,10);
    1ace:	b8 01       	movw	r22, r16
    1ad0:	4a e0       	ldi	r20, 0x0A	; 10
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	0e 94 a5 10 	call	0x214a	; 0x214a <itoa>
    1ad8:	78 01       	movw	r14, r16
void m_usb_tx_hexchar(unsigned char i)
{
	phex(i);
}

void m_usb_tx_int(int i)
    1ada:	8e 01       	movw	r16, r28
    1adc:	08 5f       	subi	r16, 0xF8	; 248
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1ae0:	f7 01       	movw	r30, r14
    1ae2:	81 91       	ld	r24, Z+
    1ae4:	7f 01       	movw	r14, r30
    1ae6:	88 23       	and	r24, r24
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <m_usb_tx_int+0x4c>
            m_usb_tx_char(string[i]);
    1aea:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1aee:	e0 16       	cp	r14, r16
    1af0:	f1 06       	cpc	r15, r17
    1af2:	b1 f7       	brne	.-20     	; 0x1ae0 <m_usb_tx_int+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1af4:	27 96       	adiw	r28, 0x07	; 7
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	08 95       	ret

00001b0e <m_usb_tx_uint>:

void m_usb_tx_uint(unsigned int i)
{
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <m_usb_tx_uint+0xe>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <m_usb_tx_uint+0x10>
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	char string[5] = {0,0,0,0,0};
    1b24:	8e 01       	movw	r16, r28
    1b26:	0f 5f       	subi	r16, 0xFF	; 255
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	25 e0       	ldi	r18, 0x05	; 5
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	11 92       	st	Z+, r1
    1b30:	2a 95       	dec	r18
    1b32:	e9 f7       	brne	.-6      	; 0x1b2e <m_usb_tx_uint+0x20>
	utoa(i,string,10);
    1b34:	b8 01       	movw	r22, r16
    1b36:	4a e0       	ldi	r20, 0x0A	; 10
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	0e 94 1f 11 	call	0x223e	; 0x223e <utoa>
    1b3e:	78 01       	movw	r14, r16
            m_usb_tx_char(string[i]);
        }
	}
}

void m_usb_tx_uint(unsigned int i)
    1b40:	8e 01       	movw	r16, r28
    1b42:	0a 5f       	subi	r16, 0xFA	; 250
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
        if(string[i]){
    1b46:	f7 01       	movw	r30, r14
    1b48:	81 91       	ld	r24, Z+
    1b4a:	7f 01       	movw	r14, r30
    1b4c:	88 23       	and	r24, r24
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <m_usb_tx_uint+0x46>
            m_usb_tx_char(string[i]);
    1b50:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    1b54:	e0 16       	cp	r14, r16
    1b56:	f1 06       	cpc	r15, r17
    1b58:	b1 f7       	brne	.-20     	; 0x1b46 <m_usb_tx_uint+0x38>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	08 95       	ret

00001b72 <m_usb_tx_long>:

void m_usb_tx_long(long i)
{
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	2b 97       	sbiw	r28, 0x0b	; 11
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    1b8e:	8e 01       	movw	r16, r28
    1b90:	0f 5f       	subi	r16, 0xFF	; 255
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	2b e0       	ldi	r18, 0x0B	; 11
    1b96:	f8 01       	movw	r30, r16
    1b98:	11 92       	st	Z+, r1
    1b9a:	2a 95       	dec	r18
    1b9c:	e9 f7       	brne	.-6      	; 0x1b98 <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    1b9e:	a8 01       	movw	r20, r16
    1ba0:	2a e0       	ldi	r18, 0x0A	; 10
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	0e 94 c6 10 	call	0x218c	; 0x218c <ltoa>
    1ba8:	78 01       	movw	r14, r16
            m_usb_tx_char(string[i]);
        }
	}
}

void m_usb_tx_long(long i)
    1baa:	8e 01       	movw	r16, r28
    1bac:	04 5f       	subi	r16, 0xF4	; 244
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
        if(string[i]){
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	81 91       	ld	r24, Z+
    1bb4:	7f 01       	movw	r14, r30
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <m_usb_tx_long+0x4c>
            m_usb_tx_char(string[i]);
    1bba:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    1bbe:	e0 16       	cp	r14, r16
    1bc0:	f1 06       	cpc	r15, r17
    1bc2:	b1 f7       	brne	.-20     	; 0x1bb0 <m_usb_tx_long+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1bc4:	2b 96       	adiw	r28, 0x0b	; 11
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	08 95       	ret

00001bde <m_usb_tx_ulong>:

void m_usb_tx_ulong(unsigned long i)
{
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	2a 97       	sbiw	r28, 0x0a	; 10
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    1bfa:	8e 01       	movw	r16, r28
    1bfc:	0f 5f       	subi	r16, 0xFF	; 255
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	2a e0       	ldi	r18, 0x0A	; 10
    1c02:	f8 01       	movw	r30, r16
    1c04:	11 92       	st	Z+, r1
    1c06:	2a 95       	dec	r18
    1c08:	e9 f7       	brne	.-6      	; 0x1c04 <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    1c0a:	a8 01       	movw	r20, r16
    1c0c:	2a e0       	ldi	r18, 0x0A	; 10
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <ultoa>
    1c14:	78 01       	movw	r14, r16
            m_usb_tx_char(string[i]);
        }
	}
}

void m_usb_tx_ulong(unsigned long i)
    1c16:	8e 01       	movw	r16, r28
    1c18:	05 5f       	subi	r16, 0xF5	; 245
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
        if(string[i]){
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	81 91       	ld	r24, Z+
    1c20:	7f 01       	movw	r14, r30
    1c22:	88 23       	and	r24, r24
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <m_usb_tx_ulong+0x4c>
            m_usb_tx_char(string[i]);
    1c26:	0e 94 29 09 	call	0x1252	; 0x1252 <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    1c2a:	e0 16       	cp	r14, r16
    1c2c:	f1 06       	cpc	r15, r17
    1c2e:	b1 f7       	brne	.-20     	; 0x1c1c <m_usb_tx_ulong+0x3e>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
    1c30:	2a 96       	adiw	r28, 0x0a	; 10
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	08 95       	ret

00001c4a <smallDelay>:
	m_rf_send(TXaddress,string, COMMONLENGTH);
	smallDelay(1000);
}
void smallDelay(int value)
{
	for (int i=0;i<value;i++);
    1c4a:	18 16       	cp	r1, r24
    1c4c:	19 06       	cpc	r1, r25
    1c4e:	3c f4       	brge	.+14     	; 0x1c5e <smallDelay+0x14>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	2f 5f       	subi	r18, 0xFF	; 255
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	28 17       	cp	r18, r24
    1c5a:	39 07       	cpc	r19, r25
    1c5c:	d9 f7       	brne	.-10     	; 0x1c54 <smallDelay+0xa>
    1c5e:	08 95       	ret

00001c60 <wirelessinitial>:

#define COMMONLENGTH 8

void wirelessinitial(void)
{
	m_bus_init();
    1c60:	0e 94 9b 05 	call	0xb36	; 0xb36 <m_bus_init>
	m_rf_open(Channel,Address,packLength);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	67 e1       	ldi	r22, 0x17	; 23
    1c68:	48 e0       	ldi	r20, 0x08	; 8
    1c6a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <m_rf_open>
}
    1c6e:	08 95       	ret

00001c70 <wireless_int>:

void wireless_int(int i)
{
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	28 97       	sbiw	r28, 0x08	; 8
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
	char string[8] = {0,0,0,0,0,0,0};
    1c88:	8e 01       	movw	r16, r28
    1c8a:	0f 5f       	subi	r16, 0xFF	; 255
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	28 e0       	ldi	r18, 0x08	; 8
    1c90:	f8 01       	movw	r30, r16
    1c92:	11 92       	st	Z+, r1
    1c94:	2a 95       	dec	r18
    1c96:	e9 f7       	brne	.-6      	; 0x1c92 <wireless_int+0x22>
	itoa(i,string,10);
    1c98:	b8 01       	movw	r22, r16
    1c9a:	4a e0       	ldi	r20, 0x0A	; 10
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	0e 94 a5 10 	call	0x214a	; 0x214a <itoa>
	m_rf_send(TXaddress,string, COMMONLENGTH);
    1ca2:	8d e1       	ldi	r24, 0x1D	; 29
    1ca4:	b8 01       	movw	r22, r16
    1ca6:	48 e0       	ldi	r20, 0x08	; 8
    1ca8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <m_rf_send>
	smallDelay(1000);
    1cac:	88 ee       	ldi	r24, 0xE8	; 232
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <smallDelay>
}
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <wireless_uint>:
void wireless_uint(unsigned int i)
{
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	28 97       	sbiw	r28, 0x08	; 8
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
	char string[8] = {0,0,0,0,0,0,0};
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	0f 5f       	subi	r16, 0xFF	; 255
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	28 e0       	ldi	r18, 0x08	; 8
    1cea:	f8 01       	movw	r30, r16
    1cec:	11 92       	st	Z+, r1
    1cee:	2a 95       	dec	r18
    1cf0:	e9 f7       	brne	.-6      	; 0x1cec <wireless_uint+0x22>
	utoa(i,string,10);
    1cf2:	b8 01       	movw	r22, r16
    1cf4:	4a e0       	ldi	r20, 0x0A	; 10
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	0e 94 1f 11 	call	0x223e	; 0x223e <utoa>
	m_rf_send(TXaddress,string, COMMONLENGTH);
    1cfc:	8d e1       	ldi	r24, 0x1D	; 29
    1cfe:	b8 01       	movw	r22, r16
    1d00:	48 e0       	ldi	r20, 0x08	; 8
    1d02:	0e 94 74 08 	call	0x10e8	; 0x10e8 <m_rf_send>
	smallDelay(1000);
    1d06:	88 ee       	ldi	r24, 0xE8	; 232
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <smallDelay>
}
    1d0e:	28 96       	adiw	r28, 0x08	; 8
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <wireless_char>:
void wireless_char(char i)
{
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	28 97       	sbiw	r28, 0x08	; 8
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
	char string[8] = {0,0,0,0,0,0,0};
    1d38:	be 01       	movw	r22, r28
    1d3a:	6f 5f       	subi	r22, 0xFF	; 255
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3e:	98 e0       	ldi	r25, 0x08	; 8
    1d40:	fb 01       	movw	r30, r22
    1d42:	11 92       	st	Z+, r1
    1d44:	9a 95       	dec	r25
    1d46:	e9 f7       	brne	.-6      	; 0x1d42 <wireless_char+0x1e>
	string[0] = i;
    1d48:	89 83       	std	Y+1, r24	; 0x01
	m_rf_send(TXaddress,string, COMMONLENGTH);
    1d4a:	8d e1       	ldi	r24, 0x1D	; 29
    1d4c:	48 e0       	ldi	r20, 0x08	; 8
    1d4e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <m_rf_send>
	smallDelay(1000);
    1d52:	88 ee       	ldi	r24, 0xE8	; 232
    1d54:	93 e0       	ldi	r25, 0x03	; 3
    1d56:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <smallDelay>
}
    1d5a:	28 96       	adiw	r28, 0x08	; 8
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <__subsf3>:
    1d6c:	50 58       	subi	r21, 0x80	; 128

00001d6e <__addsf3>:
    1d6e:	bb 27       	eor	r27, r27
    1d70:	aa 27       	eor	r26, r26
    1d72:	0e d0       	rcall	.+28     	; 0x1d90 <__addsf3x>
    1d74:	4d c1       	rjmp	.+666    	; 0x2010 <__fp_round>
    1d76:	3e d1       	rcall	.+636    	; 0x1ff4 <__fp_pscA>
    1d78:	30 f0       	brcs	.+12     	; 0x1d86 <__addsf3+0x18>
    1d7a:	43 d1       	rcall	.+646    	; 0x2002 <__fp_pscB>
    1d7c:	20 f0       	brcs	.+8      	; 0x1d86 <__addsf3+0x18>
    1d7e:	31 f4       	brne	.+12     	; 0x1d8c <__addsf3+0x1e>
    1d80:	9f 3f       	cpi	r25, 0xFF	; 255
    1d82:	11 f4       	brne	.+4      	; 0x1d88 <__addsf3+0x1a>
    1d84:	1e f4       	brtc	.+6      	; 0x1d8c <__addsf3+0x1e>
    1d86:	33 c1       	rjmp	.+614    	; 0x1fee <__fp_nan>
    1d88:	0e f4       	brtc	.+2      	; 0x1d8c <__addsf3+0x1e>
    1d8a:	e0 95       	com	r30
    1d8c:	e7 fb       	bst	r30, 7
    1d8e:	29 c1       	rjmp	.+594    	; 0x1fe2 <__fp_inf>

00001d90 <__addsf3x>:
    1d90:	e9 2f       	mov	r30, r25
    1d92:	4f d1       	rcall	.+670    	; 0x2032 <__fp_split3>
    1d94:	80 f3       	brcs	.-32     	; 0x1d76 <__addsf3+0x8>
    1d96:	ba 17       	cp	r27, r26
    1d98:	62 07       	cpc	r22, r18
    1d9a:	73 07       	cpc	r23, r19
    1d9c:	84 07       	cpc	r24, r20
    1d9e:	95 07       	cpc	r25, r21
    1da0:	18 f0       	brcs	.+6      	; 0x1da8 <__addsf3x+0x18>
    1da2:	71 f4       	brne	.+28     	; 0x1dc0 <__addsf3x+0x30>
    1da4:	9e f5       	brtc	.+102    	; 0x1e0c <__addsf3x+0x7c>
    1da6:	67 c1       	rjmp	.+718    	; 0x2076 <__fp_zero>
    1da8:	0e f4       	brtc	.+2      	; 0x1dac <__addsf3x+0x1c>
    1daa:	e0 95       	com	r30
    1dac:	0b 2e       	mov	r0, r27
    1dae:	ba 2f       	mov	r27, r26
    1db0:	a0 2d       	mov	r26, r0
    1db2:	0b 01       	movw	r0, r22
    1db4:	b9 01       	movw	r22, r18
    1db6:	90 01       	movw	r18, r0
    1db8:	0c 01       	movw	r0, r24
    1dba:	ca 01       	movw	r24, r20
    1dbc:	a0 01       	movw	r20, r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	ff 27       	eor	r31, r31
    1dc2:	59 1b       	sub	r21, r25
    1dc4:	99 f0       	breq	.+38     	; 0x1dec <__addsf3x+0x5c>
    1dc6:	59 3f       	cpi	r21, 0xF9	; 249
    1dc8:	50 f4       	brcc	.+20     	; 0x1dde <__addsf3x+0x4e>
    1dca:	50 3e       	cpi	r21, 0xE0	; 224
    1dcc:	68 f1       	brcs	.+90     	; 0x1e28 <__addsf3x+0x98>
    1dce:	1a 16       	cp	r1, r26
    1dd0:	f0 40       	sbci	r31, 0x00	; 0
    1dd2:	a2 2f       	mov	r26, r18
    1dd4:	23 2f       	mov	r18, r19
    1dd6:	34 2f       	mov	r19, r20
    1dd8:	44 27       	eor	r20, r20
    1dda:	58 5f       	subi	r21, 0xF8	; 248
    1ddc:	f3 cf       	rjmp	.-26     	; 0x1dc4 <__addsf3x+0x34>
    1dde:	46 95       	lsr	r20
    1de0:	37 95       	ror	r19
    1de2:	27 95       	ror	r18
    1de4:	a7 95       	ror	r26
    1de6:	f0 40       	sbci	r31, 0x00	; 0
    1de8:	53 95       	inc	r21
    1dea:	c9 f7       	brne	.-14     	; 0x1dde <__addsf3x+0x4e>
    1dec:	7e f4       	brtc	.+30     	; 0x1e0c <__addsf3x+0x7c>
    1dee:	1f 16       	cp	r1, r31
    1df0:	ba 0b       	sbc	r27, r26
    1df2:	62 0b       	sbc	r22, r18
    1df4:	73 0b       	sbc	r23, r19
    1df6:	84 0b       	sbc	r24, r20
    1df8:	ba f0       	brmi	.+46     	; 0x1e28 <__addsf3x+0x98>
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	a1 f0       	breq	.+40     	; 0x1e26 <__addsf3x+0x96>
    1dfe:	ff 0f       	add	r31, r31
    1e00:	bb 1f       	adc	r27, r27
    1e02:	66 1f       	adc	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	c2 f7       	brpl	.-16     	; 0x1dfa <__addsf3x+0x6a>
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <__addsf3x+0x98>
    1e0c:	ba 0f       	add	r27, r26
    1e0e:	62 1f       	adc	r22, r18
    1e10:	73 1f       	adc	r23, r19
    1e12:	84 1f       	adc	r24, r20
    1e14:	48 f4       	brcc	.+18     	; 0x1e28 <__addsf3x+0x98>
    1e16:	87 95       	ror	r24
    1e18:	77 95       	ror	r23
    1e1a:	67 95       	ror	r22
    1e1c:	b7 95       	ror	r27
    1e1e:	f7 95       	ror	r31
    1e20:	9e 3f       	cpi	r25, 0xFE	; 254
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <__addsf3x+0x96>
    1e24:	b3 cf       	rjmp	.-154    	; 0x1d8c <__addsf3+0x1e>
    1e26:	93 95       	inc	r25
    1e28:	88 0f       	add	r24, r24
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <__addsf3x+0x9e>
    1e2c:	99 27       	eor	r25, r25
    1e2e:	ee 0f       	add	r30, r30
    1e30:	97 95       	ror	r25
    1e32:	87 95       	ror	r24
    1e34:	08 95       	ret

00001e36 <__divsf3>:
    1e36:	0c d0       	rcall	.+24     	; 0x1e50 <__divsf3x>
    1e38:	eb c0       	rjmp	.+470    	; 0x2010 <__fp_round>
    1e3a:	e3 d0       	rcall	.+454    	; 0x2002 <__fp_pscB>
    1e3c:	40 f0       	brcs	.+16     	; 0x1e4e <__divsf3+0x18>
    1e3e:	da d0       	rcall	.+436    	; 0x1ff4 <__fp_pscA>
    1e40:	30 f0       	brcs	.+12     	; 0x1e4e <__divsf3+0x18>
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <__divsf3+0x16>
    1e44:	5f 3f       	cpi	r21, 0xFF	; 255
    1e46:	19 f0       	breq	.+6      	; 0x1e4e <__divsf3+0x18>
    1e48:	cc c0       	rjmp	.+408    	; 0x1fe2 <__fp_inf>
    1e4a:	51 11       	cpse	r21, r1
    1e4c:	15 c1       	rjmp	.+554    	; 0x2078 <__fp_szero>
    1e4e:	cf c0       	rjmp	.+414    	; 0x1fee <__fp_nan>

00001e50 <__divsf3x>:
    1e50:	f0 d0       	rcall	.+480    	; 0x2032 <__fp_split3>
    1e52:	98 f3       	brcs	.-26     	; 0x1e3a <__divsf3+0x4>

00001e54 <__divsf3_pse>:
    1e54:	99 23       	and	r25, r25
    1e56:	c9 f3       	breq	.-14     	; 0x1e4a <__divsf3+0x14>
    1e58:	55 23       	and	r21, r21
    1e5a:	b1 f3       	breq	.-20     	; 0x1e48 <__divsf3+0x12>
    1e5c:	95 1b       	sub	r25, r21
    1e5e:	55 0b       	sbc	r21, r21
    1e60:	bb 27       	eor	r27, r27
    1e62:	aa 27       	eor	r26, r26
    1e64:	62 17       	cp	r22, r18
    1e66:	73 07       	cpc	r23, r19
    1e68:	84 07       	cpc	r24, r20
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <__divsf3_pse+0x26>
    1e6c:	9f 5f       	subi	r25, 0xFF	; 255
    1e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	44 1f       	adc	r20, r20
    1e76:	aa 1f       	adc	r26, r26
    1e78:	a9 f3       	breq	.-22     	; 0x1e64 <__divsf3_pse+0x10>
    1e7a:	33 d0       	rcall	.+102    	; 0x1ee2 <__divsf3_pse+0x8e>
    1e7c:	0e 2e       	mov	r0, r30
    1e7e:	3a f0       	brmi	.+14     	; 0x1e8e <__divsf3_pse+0x3a>
    1e80:	e0 e8       	ldi	r30, 0x80	; 128
    1e82:	30 d0       	rcall	.+96     	; 0x1ee4 <__divsf3_pse+0x90>
    1e84:	91 50       	subi	r25, 0x01	; 1
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	e6 95       	lsr	r30
    1e8a:	00 1c       	adc	r0, r0
    1e8c:	ca f7       	brpl	.-14     	; 0x1e80 <__divsf3_pse+0x2c>
    1e8e:	29 d0       	rcall	.+82     	; 0x1ee2 <__divsf3_pse+0x8e>
    1e90:	fe 2f       	mov	r31, r30
    1e92:	27 d0       	rcall	.+78     	; 0x1ee2 <__divsf3_pse+0x8e>
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	26 17       	cp	r18, r22
    1e9e:	37 07       	cpc	r19, r23
    1ea0:	48 07       	cpc	r20, r24
    1ea2:	ab 07       	cpc	r26, r27
    1ea4:	b0 e8       	ldi	r27, 0x80	; 128
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <__divsf3_pse+0x56>
    1ea8:	bb 0b       	sbc	r27, r27
    1eaa:	80 2d       	mov	r24, r0
    1eac:	bf 01       	movw	r22, r30
    1eae:	ff 27       	eor	r31, r31
    1eb0:	93 58       	subi	r25, 0x83	; 131
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	2a f0       	brmi	.+10     	; 0x1ec0 <__divsf3_pse+0x6c>
    1eb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb8:	51 05       	cpc	r21, r1
    1eba:	68 f0       	brcs	.+26     	; 0x1ed6 <__divsf3_pse+0x82>
    1ebc:	92 c0       	rjmp	.+292    	; 0x1fe2 <__fp_inf>
    1ebe:	dc c0       	rjmp	.+440    	; 0x2078 <__fp_szero>
    1ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec2:	ec f3       	brlt	.-6      	; 0x1ebe <__divsf3_pse+0x6a>
    1ec4:	98 3e       	cpi	r25, 0xE8	; 232
    1ec6:	dc f3       	brlt	.-10     	; 0x1ebe <__divsf3_pse+0x6a>
    1ec8:	86 95       	lsr	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	b7 95       	ror	r27
    1ed0:	f7 95       	ror	r31
    1ed2:	9f 5f       	subi	r25, 0xFF	; 255
    1ed4:	c9 f7       	brne	.-14     	; 0x1ec8 <__divsf3_pse+0x74>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	91 1d       	adc	r25, r1
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	97 f9       	bld	r25, 7
    1ee0:	08 95       	ret
    1ee2:	e1 e0       	ldi	r30, 0x01	; 1
    1ee4:	66 0f       	add	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	88 1f       	adc	r24, r24
    1eea:	bb 1f       	adc	r27, r27
    1eec:	62 17       	cp	r22, r18
    1eee:	73 07       	cpc	r23, r19
    1ef0:	84 07       	cpc	r24, r20
    1ef2:	ba 07       	cpc	r27, r26
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__divsf3_pse+0xaa>
    1ef6:	62 1b       	sub	r22, r18
    1ef8:	73 0b       	sbc	r23, r19
    1efa:	84 0b       	sbc	r24, r20
    1efc:	ba 0b       	sbc	r27, r26
    1efe:	ee 1f       	adc	r30, r30
    1f00:	88 f7       	brcc	.-30     	; 0x1ee4 <__divsf3_pse+0x90>
    1f02:	e0 95       	com	r30
    1f04:	08 95       	ret

00001f06 <__fixsfsi>:
    1f06:	04 d0       	rcall	.+8      	; 0x1f10 <__fixunssfsi>
    1f08:	68 94       	set
    1f0a:	b1 11       	cpse	r27, r1
    1f0c:	b5 c0       	rjmp	.+362    	; 0x2078 <__fp_szero>
    1f0e:	08 95       	ret

00001f10 <__fixunssfsi>:
    1f10:	98 d0       	rcall	.+304    	; 0x2042 <__fp_splitA>
    1f12:	88 f0       	brcs	.+34     	; 0x1f36 <__fixunssfsi+0x26>
    1f14:	9f 57       	subi	r25, 0x7F	; 127
    1f16:	90 f0       	brcs	.+36     	; 0x1f3c <__fixunssfsi+0x2c>
    1f18:	b9 2f       	mov	r27, r25
    1f1a:	99 27       	eor	r25, r25
    1f1c:	b7 51       	subi	r27, 0x17	; 23
    1f1e:	a0 f0       	brcs	.+40     	; 0x1f48 <__fixunssfsi+0x38>
    1f20:	d1 f0       	breq	.+52     	; 0x1f56 <__fixunssfsi+0x46>
    1f22:	66 0f       	add	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	1a f0       	brmi	.+6      	; 0x1f32 <__fixunssfsi+0x22>
    1f2c:	ba 95       	dec	r27
    1f2e:	c9 f7       	brne	.-14     	; 0x1f22 <__fixunssfsi+0x12>
    1f30:	12 c0       	rjmp	.+36     	; 0x1f56 <__fixunssfsi+0x46>
    1f32:	b1 30       	cpi	r27, 0x01	; 1
    1f34:	81 f0       	breq	.+32     	; 0x1f56 <__fixunssfsi+0x46>
    1f36:	9f d0       	rcall	.+318    	; 0x2076 <__fp_zero>
    1f38:	b1 e0       	ldi	r27, 0x01	; 1
    1f3a:	08 95       	ret
    1f3c:	9c c0       	rjmp	.+312    	; 0x2076 <__fp_zero>
    1f3e:	67 2f       	mov	r22, r23
    1f40:	78 2f       	mov	r23, r24
    1f42:	88 27       	eor	r24, r24
    1f44:	b8 5f       	subi	r27, 0xF8	; 248
    1f46:	39 f0       	breq	.+14     	; 0x1f56 <__fixunssfsi+0x46>
    1f48:	b9 3f       	cpi	r27, 0xF9	; 249
    1f4a:	cc f3       	brlt	.-14     	; 0x1f3e <__fixunssfsi+0x2e>
    1f4c:	86 95       	lsr	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b3 95       	inc	r27
    1f54:	d9 f7       	brne	.-10     	; 0x1f4c <__fixunssfsi+0x3c>
    1f56:	3e f4       	brtc	.+14     	; 0x1f66 <__fixunssfsi+0x56>
    1f58:	90 95       	com	r25
    1f5a:	80 95       	com	r24
    1f5c:	70 95       	com	r23
    1f5e:	61 95       	neg	r22
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8f 4f       	sbci	r24, 0xFF	; 255
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	08 95       	ret

00001f68 <__floatunsisf>:
    1f68:	e8 94       	clt
    1f6a:	09 c0       	rjmp	.+18     	; 0x1f7e <__floatsisf+0x12>

00001f6c <__floatsisf>:
    1f6c:	97 fb       	bst	r25, 7
    1f6e:	3e f4       	brtc	.+14     	; 0x1f7e <__floatsisf+0x12>
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	99 23       	and	r25, r25
    1f80:	a9 f0       	breq	.+42     	; 0x1fac <__floatsisf+0x40>
    1f82:	f9 2f       	mov	r31, r25
    1f84:	96 e9       	ldi	r25, 0x96	; 150
    1f86:	bb 27       	eor	r27, r27
    1f88:	93 95       	inc	r25
    1f8a:	f6 95       	lsr	r31
    1f8c:	87 95       	ror	r24
    1f8e:	77 95       	ror	r23
    1f90:	67 95       	ror	r22
    1f92:	b7 95       	ror	r27
    1f94:	f1 11       	cpse	r31, r1
    1f96:	f8 cf       	rjmp	.-16     	; 0x1f88 <__floatsisf+0x1c>
    1f98:	fa f4       	brpl	.+62     	; 0x1fd8 <__floatsisf+0x6c>
    1f9a:	bb 0f       	add	r27, r27
    1f9c:	11 f4       	brne	.+4      	; 0x1fa2 <__floatsisf+0x36>
    1f9e:	60 ff       	sbrs	r22, 0
    1fa0:	1b c0       	rjmp	.+54     	; 0x1fd8 <__floatsisf+0x6c>
    1fa2:	6f 5f       	subi	r22, 0xFF	; 255
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	16 c0       	rjmp	.+44     	; 0x1fd8 <__floatsisf+0x6c>
    1fac:	88 23       	and	r24, r24
    1fae:	11 f0       	breq	.+4      	; 0x1fb4 <__floatsisf+0x48>
    1fb0:	96 e9       	ldi	r25, 0x96	; 150
    1fb2:	11 c0       	rjmp	.+34     	; 0x1fd6 <__floatsisf+0x6a>
    1fb4:	77 23       	and	r23, r23
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <__floatsisf+0x54>
    1fb8:	9e e8       	ldi	r25, 0x8E	; 142
    1fba:	87 2f       	mov	r24, r23
    1fbc:	76 2f       	mov	r23, r22
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <__floatsisf+0x5e>
    1fc0:	66 23       	and	r22, r22
    1fc2:	71 f0       	breq	.+28     	; 0x1fe0 <__floatsisf+0x74>
    1fc4:	96 e8       	ldi	r25, 0x86	; 134
    1fc6:	86 2f       	mov	r24, r22
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	2a f0       	brmi	.+10     	; 0x1fd8 <__floatsisf+0x6c>
    1fce:	9a 95       	dec	r25
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	88 1f       	adc	r24, r24
    1fd6:	da f7       	brpl	.-10     	; 0x1fce <__floatsisf+0x62>
    1fd8:	88 0f       	add	r24, r24
    1fda:	96 95       	lsr	r25
    1fdc:	87 95       	ror	r24
    1fde:	97 f9       	bld	r25, 7
    1fe0:	08 95       	ret

00001fe2 <__fp_inf>:
    1fe2:	97 f9       	bld	r25, 7
    1fe4:	9f 67       	ori	r25, 0x7F	; 127
    1fe6:	80 e8       	ldi	r24, 0x80	; 128
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	08 95       	ret

00001fee <__fp_nan>:
    1fee:	9f ef       	ldi	r25, 0xFF	; 255
    1ff0:	80 ec       	ldi	r24, 0xC0	; 192
    1ff2:	08 95       	ret

00001ff4 <__fp_pscA>:
    1ff4:	00 24       	eor	r0, r0
    1ff6:	0a 94       	dec	r0
    1ff8:	16 16       	cp	r1, r22
    1ffa:	17 06       	cpc	r1, r23
    1ffc:	18 06       	cpc	r1, r24
    1ffe:	09 06       	cpc	r0, r25
    2000:	08 95       	ret

00002002 <__fp_pscB>:
    2002:	00 24       	eor	r0, r0
    2004:	0a 94       	dec	r0
    2006:	12 16       	cp	r1, r18
    2008:	13 06       	cpc	r1, r19
    200a:	14 06       	cpc	r1, r20
    200c:	05 06       	cpc	r0, r21
    200e:	08 95       	ret

00002010 <__fp_round>:
    2010:	09 2e       	mov	r0, r25
    2012:	03 94       	inc	r0
    2014:	00 0c       	add	r0, r0
    2016:	11 f4       	brne	.+4      	; 0x201c <__fp_round+0xc>
    2018:	88 23       	and	r24, r24
    201a:	52 f0       	brmi	.+20     	; 0x2030 <__fp_round+0x20>
    201c:	bb 0f       	add	r27, r27
    201e:	40 f4       	brcc	.+16     	; 0x2030 <__fp_round+0x20>
    2020:	bf 2b       	or	r27, r31
    2022:	11 f4       	brne	.+4      	; 0x2028 <__fp_round+0x18>
    2024:	60 ff       	sbrs	r22, 0
    2026:	04 c0       	rjmp	.+8      	; 0x2030 <__fp_round+0x20>
    2028:	6f 5f       	subi	r22, 0xFF	; 255
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	8f 4f       	sbci	r24, 0xFF	; 255
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	08 95       	ret

00002032 <__fp_split3>:
    2032:	57 fd       	sbrc	r21, 7
    2034:	90 58       	subi	r25, 0x80	; 128
    2036:	44 0f       	add	r20, r20
    2038:	55 1f       	adc	r21, r21
    203a:	59 f0       	breq	.+22     	; 0x2052 <__fp_splitA+0x10>
    203c:	5f 3f       	cpi	r21, 0xFF	; 255
    203e:	71 f0       	breq	.+28     	; 0x205c <__fp_splitA+0x1a>
    2040:	47 95       	ror	r20

00002042 <__fp_splitA>:
    2042:	88 0f       	add	r24, r24
    2044:	97 fb       	bst	r25, 7
    2046:	99 1f       	adc	r25, r25
    2048:	61 f0       	breq	.+24     	; 0x2062 <__fp_splitA+0x20>
    204a:	9f 3f       	cpi	r25, 0xFF	; 255
    204c:	79 f0       	breq	.+30     	; 0x206c <__fp_splitA+0x2a>
    204e:	87 95       	ror	r24
    2050:	08 95       	ret
    2052:	12 16       	cp	r1, r18
    2054:	13 06       	cpc	r1, r19
    2056:	14 06       	cpc	r1, r20
    2058:	55 1f       	adc	r21, r21
    205a:	f2 cf       	rjmp	.-28     	; 0x2040 <__fp_split3+0xe>
    205c:	46 95       	lsr	r20
    205e:	f1 df       	rcall	.-30     	; 0x2042 <__fp_splitA>
    2060:	08 c0       	rjmp	.+16     	; 0x2072 <__fp_splitA+0x30>
    2062:	16 16       	cp	r1, r22
    2064:	17 06       	cpc	r1, r23
    2066:	18 06       	cpc	r1, r24
    2068:	99 1f       	adc	r25, r25
    206a:	f1 cf       	rjmp	.-30     	; 0x204e <__fp_splitA+0xc>
    206c:	86 95       	lsr	r24
    206e:	71 05       	cpc	r23, r1
    2070:	61 05       	cpc	r22, r1
    2072:	08 94       	sec
    2074:	08 95       	ret

00002076 <__fp_zero>:
    2076:	e8 94       	clt

00002078 <__fp_szero>:
    2078:	bb 27       	eor	r27, r27
    207a:	66 27       	eor	r22, r22
    207c:	77 27       	eor	r23, r23
    207e:	cb 01       	movw	r24, r22
    2080:	97 f9       	bld	r25, 7
    2082:	08 95       	ret

00002084 <__mulsf3>:
    2084:	0b d0       	rcall	.+22     	; 0x209c <__mulsf3x>
    2086:	c4 cf       	rjmp	.-120    	; 0x2010 <__fp_round>
    2088:	b5 df       	rcall	.-150    	; 0x1ff4 <__fp_pscA>
    208a:	28 f0       	brcs	.+10     	; 0x2096 <__mulsf3+0x12>
    208c:	ba df       	rcall	.-140    	; 0x2002 <__fp_pscB>
    208e:	18 f0       	brcs	.+6      	; 0x2096 <__mulsf3+0x12>
    2090:	95 23       	and	r25, r21
    2092:	09 f0       	breq	.+2      	; 0x2096 <__mulsf3+0x12>
    2094:	a6 cf       	rjmp	.-180    	; 0x1fe2 <__fp_inf>
    2096:	ab cf       	rjmp	.-170    	; 0x1fee <__fp_nan>
    2098:	11 24       	eor	r1, r1
    209a:	ee cf       	rjmp	.-36     	; 0x2078 <__fp_szero>

0000209c <__mulsf3x>:
    209c:	ca df       	rcall	.-108    	; 0x2032 <__fp_split3>
    209e:	a0 f3       	brcs	.-24     	; 0x2088 <__mulsf3+0x4>

000020a0 <__mulsf3_pse>:
    20a0:	95 9f       	mul	r25, r21
    20a2:	d1 f3       	breq	.-12     	; 0x2098 <__mulsf3+0x14>
    20a4:	95 0f       	add	r25, r21
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	55 1f       	adc	r21, r21
    20aa:	62 9f       	mul	r22, r18
    20ac:	f0 01       	movw	r30, r0
    20ae:	72 9f       	mul	r23, r18
    20b0:	bb 27       	eor	r27, r27
    20b2:	f0 0d       	add	r31, r0
    20b4:	b1 1d       	adc	r27, r1
    20b6:	63 9f       	mul	r22, r19
    20b8:	aa 27       	eor	r26, r26
    20ba:	f0 0d       	add	r31, r0
    20bc:	b1 1d       	adc	r27, r1
    20be:	aa 1f       	adc	r26, r26
    20c0:	64 9f       	mul	r22, r20
    20c2:	66 27       	eor	r22, r22
    20c4:	b0 0d       	add	r27, r0
    20c6:	a1 1d       	adc	r26, r1
    20c8:	66 1f       	adc	r22, r22
    20ca:	82 9f       	mul	r24, r18
    20cc:	22 27       	eor	r18, r18
    20ce:	b0 0d       	add	r27, r0
    20d0:	a1 1d       	adc	r26, r1
    20d2:	62 1f       	adc	r22, r18
    20d4:	73 9f       	mul	r23, r19
    20d6:	b0 0d       	add	r27, r0
    20d8:	a1 1d       	adc	r26, r1
    20da:	62 1f       	adc	r22, r18
    20dc:	83 9f       	mul	r24, r19
    20de:	a0 0d       	add	r26, r0
    20e0:	61 1d       	adc	r22, r1
    20e2:	22 1f       	adc	r18, r18
    20e4:	74 9f       	mul	r23, r20
    20e6:	33 27       	eor	r19, r19
    20e8:	a0 0d       	add	r26, r0
    20ea:	61 1d       	adc	r22, r1
    20ec:	23 1f       	adc	r18, r19
    20ee:	84 9f       	mul	r24, r20
    20f0:	60 0d       	add	r22, r0
    20f2:	21 1d       	adc	r18, r1
    20f4:	82 2f       	mov	r24, r18
    20f6:	76 2f       	mov	r23, r22
    20f8:	6a 2f       	mov	r22, r26
    20fa:	11 24       	eor	r1, r1
    20fc:	9f 57       	subi	r25, 0x7F	; 127
    20fe:	50 40       	sbci	r21, 0x00	; 0
    2100:	8a f0       	brmi	.+34     	; 0x2124 <__mulsf3_pse+0x84>
    2102:	e1 f0       	breq	.+56     	; 0x213c <__mulsf3_pse+0x9c>
    2104:	88 23       	and	r24, r24
    2106:	4a f0       	brmi	.+18     	; 0x211a <__mulsf3_pse+0x7a>
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	bb 1f       	adc	r27, r27
    210e:	66 1f       	adc	r22, r22
    2110:	77 1f       	adc	r23, r23
    2112:	88 1f       	adc	r24, r24
    2114:	91 50       	subi	r25, 0x01	; 1
    2116:	50 40       	sbci	r21, 0x00	; 0
    2118:	a9 f7       	brne	.-22     	; 0x2104 <__mulsf3_pse+0x64>
    211a:	9e 3f       	cpi	r25, 0xFE	; 254
    211c:	51 05       	cpc	r21, r1
    211e:	70 f0       	brcs	.+28     	; 0x213c <__mulsf3_pse+0x9c>
    2120:	60 cf       	rjmp	.-320    	; 0x1fe2 <__fp_inf>
    2122:	aa cf       	rjmp	.-172    	; 0x2078 <__fp_szero>
    2124:	5f 3f       	cpi	r21, 0xFF	; 255
    2126:	ec f3       	brlt	.-6      	; 0x2122 <__mulsf3_pse+0x82>
    2128:	98 3e       	cpi	r25, 0xE8	; 232
    212a:	dc f3       	brlt	.-10     	; 0x2122 <__mulsf3_pse+0x82>
    212c:	86 95       	lsr	r24
    212e:	77 95       	ror	r23
    2130:	67 95       	ror	r22
    2132:	b7 95       	ror	r27
    2134:	f7 95       	ror	r31
    2136:	e7 95       	ror	r30
    2138:	9f 5f       	subi	r25, 0xFF	; 255
    213a:	c1 f7       	brne	.-16     	; 0x212c <__mulsf3_pse+0x8c>
    213c:	fe 2b       	or	r31, r30
    213e:	88 0f       	add	r24, r24
    2140:	91 1d       	adc	r25, r1
    2142:	96 95       	lsr	r25
    2144:	87 95       	ror	r24
    2146:	97 f9       	bld	r25, 7
    2148:	08 95       	ret

0000214a <itoa>:
    214a:	fb 01       	movw	r30, r22
    214c:	9f 01       	movw	r18, r30
    214e:	e8 94       	clt
    2150:	42 30       	cpi	r20, 0x02	; 2
    2152:	c4 f0       	brlt	.+48     	; 0x2184 <itoa+0x3a>
    2154:	45 32       	cpi	r20, 0x25	; 37
    2156:	b4 f4       	brge	.+44     	; 0x2184 <itoa+0x3a>
    2158:	4a 30       	cpi	r20, 0x0A	; 10
    215a:	29 f4       	brne	.+10     	; 0x2166 <itoa+0x1c>
    215c:	97 fb       	bst	r25, 7
    215e:	1e f4       	brtc	.+6      	; 0x2166 <itoa+0x1c>
    2160:	90 95       	com	r25
    2162:	81 95       	neg	r24
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	64 2f       	mov	r22, r20
    2168:	77 27       	eor	r23, r23
    216a:	0e 94 45 11 	call	0x228a	; 0x228a <__udivmodhi4>
    216e:	80 5d       	subi	r24, 0xD0	; 208
    2170:	8a 33       	cpi	r24, 0x3A	; 58
    2172:	0c f0       	brlt	.+2      	; 0x2176 <itoa+0x2c>
    2174:	89 5d       	subi	r24, 0xD9	; 217
    2176:	81 93       	st	Z+, r24
    2178:	cb 01       	movw	r24, r22
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	a1 f7       	brne	.-24     	; 0x2166 <itoa+0x1c>
    217e:	16 f4       	brtc	.+4      	; 0x2184 <itoa+0x3a>
    2180:	5d e2       	ldi	r21, 0x2D	; 45
    2182:	51 93       	st	Z+, r21
    2184:	10 82       	st	Z, r1
    2186:	c9 01       	movw	r24, r18
    2188:	0c 94 35 11 	jmp	0x226a	; 0x226a <strrev>

0000218c <ltoa>:
    218c:	fa 01       	movw	r30, r20
    218e:	cf 93       	push	r28
    2190:	ff 93       	push	r31
    2192:	ef 93       	push	r30
    2194:	22 30       	cpi	r18, 0x02	; 2
    2196:	44 f1       	brlt	.+80     	; 0x21e8 <ltoa+0x5c>
    2198:	25 32       	cpi	r18, 0x25	; 37
    219a:	34 f5       	brge	.+76     	; 0x21e8 <ltoa+0x5c>
    219c:	c2 2f       	mov	r28, r18
    219e:	e8 94       	clt
    21a0:	ca 30       	cpi	r28, 0x0A	; 10
    21a2:	49 f4       	brne	.+18     	; 0x21b6 <ltoa+0x2a>
    21a4:	97 fb       	bst	r25, 7
    21a6:	3e f4       	brtc	.+14     	; 0x21b6 <ltoa+0x2a>
    21a8:	90 95       	com	r25
    21aa:	80 95       	com	r24
    21ac:	70 95       	com	r23
    21ae:	61 95       	neg	r22
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	8f 4f       	sbci	r24, 0xFF	; 255
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	2c 2f       	mov	r18, r28
    21b8:	33 27       	eor	r19, r19
    21ba:	44 27       	eor	r20, r20
    21bc:	55 27       	eor	r21, r21
    21be:	ff 93       	push	r31
    21c0:	ef 93       	push	r30
    21c2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodsi4>
    21c6:	ef 91       	pop	r30
    21c8:	ff 91       	pop	r31
    21ca:	60 5d       	subi	r22, 0xD0	; 208
    21cc:	6a 33       	cpi	r22, 0x3A	; 58
    21ce:	0c f0       	brlt	.+2      	; 0x21d2 <ltoa+0x46>
    21d0:	69 5d       	subi	r22, 0xD9	; 217
    21d2:	61 93       	st	Z+, r22
    21d4:	b9 01       	movw	r22, r18
    21d6:	ca 01       	movw	r24, r20
    21d8:	60 50       	subi	r22, 0x00	; 0
    21da:	70 40       	sbci	r23, 0x00	; 0
    21dc:	80 40       	sbci	r24, 0x00	; 0
    21de:	90 40       	sbci	r25, 0x00	; 0
    21e0:	51 f7       	brne	.-44     	; 0x21b6 <ltoa+0x2a>
    21e2:	16 f4       	brtc	.+4      	; 0x21e8 <ltoa+0x5c>
    21e4:	cd e2       	ldi	r28, 0x2D	; 45
    21e6:	c1 93       	st	Z+, r28
    21e8:	10 82       	st	Z, r1
    21ea:	8f 91       	pop	r24
    21ec:	9f 91       	pop	r25
    21ee:	cf 91       	pop	r28
    21f0:	0c 94 35 11 	jmp	0x226a	; 0x226a <strrev>

000021f4 <ultoa>:
    21f4:	fa 01       	movw	r30, r20
    21f6:	cf 93       	push	r28
    21f8:	ff 93       	push	r31
    21fa:	ef 93       	push	r30
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	cc f0       	brlt	.+50     	; 0x2232 <ultoa+0x3e>
    2200:	25 32       	cpi	r18, 0x25	; 37
    2202:	bc f4       	brge	.+46     	; 0x2232 <ultoa+0x3e>
    2204:	c2 2f       	mov	r28, r18
    2206:	2c 2f       	mov	r18, r28
    2208:	33 27       	eor	r19, r19
    220a:	44 27       	eor	r20, r20
    220c:	55 27       	eor	r21, r21
    220e:	ff 93       	push	r31
    2210:	ef 93       	push	r30
    2212:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodsi4>
    2216:	ef 91       	pop	r30
    2218:	ff 91       	pop	r31
    221a:	60 5d       	subi	r22, 0xD0	; 208
    221c:	6a 33       	cpi	r22, 0x3A	; 58
    221e:	0c f0       	brlt	.+2      	; 0x2222 <ultoa+0x2e>
    2220:	69 5d       	subi	r22, 0xD9	; 217
    2222:	61 93       	st	Z+, r22
    2224:	b9 01       	movw	r22, r18
    2226:	ca 01       	movw	r24, r20
    2228:	60 50       	subi	r22, 0x00	; 0
    222a:	70 40       	sbci	r23, 0x00	; 0
    222c:	80 40       	sbci	r24, 0x00	; 0
    222e:	90 40       	sbci	r25, 0x00	; 0
    2230:	51 f7       	brne	.-44     	; 0x2206 <ultoa+0x12>
    2232:	10 82       	st	Z, r1
    2234:	8f 91       	pop	r24
    2236:	9f 91       	pop	r25
    2238:	cf 91       	pop	r28
    223a:	0c 94 35 11 	jmp	0x226a	; 0x226a <strrev>

0000223e <utoa>:
    223e:	fb 01       	movw	r30, r22
    2240:	9f 01       	movw	r18, r30
    2242:	42 30       	cpi	r20, 0x02	; 2
    2244:	74 f0       	brlt	.+28     	; 0x2262 <utoa+0x24>
    2246:	45 32       	cpi	r20, 0x25	; 37
    2248:	64 f4       	brge	.+24     	; 0x2262 <utoa+0x24>
    224a:	64 2f       	mov	r22, r20
    224c:	77 27       	eor	r23, r23
    224e:	0e 94 45 11 	call	0x228a	; 0x228a <__udivmodhi4>
    2252:	80 5d       	subi	r24, 0xD0	; 208
    2254:	8a 33       	cpi	r24, 0x3A	; 58
    2256:	0c f0       	brlt	.+2      	; 0x225a <utoa+0x1c>
    2258:	89 5d       	subi	r24, 0xD9	; 217
    225a:	81 93       	st	Z+, r24
    225c:	cb 01       	movw	r24, r22
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	a1 f7       	brne	.-24     	; 0x224a <utoa+0xc>
    2262:	10 82       	st	Z, r1
    2264:	c9 01       	movw	r24, r18
    2266:	0c 94 35 11 	jmp	0x226a	; 0x226a <strrev>

0000226a <strrev>:
    226a:	dc 01       	movw	r26, r24
    226c:	fc 01       	movw	r30, r24
    226e:	67 2f       	mov	r22, r23
    2270:	71 91       	ld	r23, Z+
    2272:	77 23       	and	r23, r23
    2274:	e1 f7       	brne	.-8      	; 0x226e <strrev+0x4>
    2276:	32 97       	sbiw	r30, 0x02	; 2
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <strrev+0x18>
    227a:	7c 91       	ld	r23, X
    227c:	6d 93       	st	X+, r22
    227e:	70 83       	st	Z, r23
    2280:	62 91       	ld	r22, -Z
    2282:	ae 17       	cp	r26, r30
    2284:	bf 07       	cpc	r27, r31
    2286:	c8 f3       	brcs	.-14     	; 0x227a <strrev+0x10>
    2288:	08 95       	ret

0000228a <__udivmodhi4>:
    228a:	aa 1b       	sub	r26, r26
    228c:	bb 1b       	sub	r27, r27
    228e:	51 e1       	ldi	r21, 0x11	; 17
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__udivmodhi4_ep>

00002292 <__udivmodhi4_loop>:
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	a6 17       	cp	r26, r22
    2298:	b7 07       	cpc	r27, r23
    229a:	10 f0       	brcs	.+4      	; 0x22a0 <__udivmodhi4_ep>
    229c:	a6 1b       	sub	r26, r22
    229e:	b7 0b       	sbc	r27, r23

000022a0 <__udivmodhi4_ep>:
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	5a 95       	dec	r21
    22a6:	a9 f7       	brne	.-22     	; 0x2292 <__udivmodhi4_loop>
    22a8:	80 95       	com	r24
    22aa:	90 95       	com	r25
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	08 95       	ret

000022b2 <__udivmodsi4>:
    22b2:	a1 e2       	ldi	r26, 0x21	; 33
    22b4:	1a 2e       	mov	r1, r26
    22b6:	aa 1b       	sub	r26, r26
    22b8:	bb 1b       	sub	r27, r27
    22ba:	fd 01       	movw	r30, r26
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <__udivmodsi4_ep>

000022be <__udivmodsi4_loop>:
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	ee 1f       	adc	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	a2 17       	cp	r26, r18
    22c8:	b3 07       	cpc	r27, r19
    22ca:	e4 07       	cpc	r30, r20
    22cc:	f5 07       	cpc	r31, r21
    22ce:	20 f0       	brcs	.+8      	; 0x22d8 <__udivmodsi4_ep>
    22d0:	a2 1b       	sub	r26, r18
    22d2:	b3 0b       	sbc	r27, r19
    22d4:	e4 0b       	sbc	r30, r20
    22d6:	f5 0b       	sbc	r31, r21

000022d8 <__udivmodsi4_ep>:
    22d8:	66 1f       	adc	r22, r22
    22da:	77 1f       	adc	r23, r23
    22dc:	88 1f       	adc	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	1a 94       	dec	r1
    22e2:	69 f7       	brne	.-38     	; 0x22be <__udivmodsi4_loop>
    22e4:	60 95       	com	r22
    22e6:	70 95       	com	r23
    22e8:	80 95       	com	r24
    22ea:	90 95       	com	r25
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	bd 01       	movw	r22, r26
    22f2:	cf 01       	movw	r24, r30
    22f4:	08 95       	ret

000022f6 <_exit>:
    22f6:	f8 94       	cli

000022f8 <__stop_program>:
    22f8:	ff cf       	rjmp	.-2      	; 0x22f8 <__stop_program>
